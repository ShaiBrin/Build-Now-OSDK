{"version":3,"file":"wireQueryDataTypeToQueryDataTypeDefinition.js","names":["isNullableQueryDataType","wireQueryDataTypeToQueryDataTypeDefinition","input","type","nullable","object","objectTypeApiName","objectSet","subType","multiplicity","set","allowNulls","unionTypes","length","nonNull","find","t","union","reduce","acc","push","struct","Object","fromEntries","fields","map","f","name","fieldType","twoDimensionalAggregation","get2DQueryAggregationProps","threeDimensionalAggregation","get3DQueryAggregationProps","Error","keyType","keySubtype","valueType","guardInvalidKeyTypes","key"],"sources":["wireQueryDataTypeToQueryDataTypeDefinition.js"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNullableQueryDataType } from \"./isNullableQueryDataType.js\";\nexport function wireQueryDataTypeToQueryDataTypeDefinition(input) {\n    switch (input.type) {\n        case \"double\":\n        case \"float\":\n        case \"integer\":\n        case \"long\":\n        case \"attachment\":\n        case \"boolean\":\n        case \"date\":\n        case \"string\":\n        case \"timestamp\":\n            return {\n                type: input.type,\n                nullable: false,\n            };\n        case \"object\":\n            return {\n                type: \"object\",\n                object: input.objectTypeApiName,\n                nullable: false,\n            };\n        case \"objectSet\":\n            return {\n                type: \"objectSet\",\n                objectSet: input.objectTypeApiName,\n                nullable: false,\n            };\n        case \"array\":\n            return {\n                ...wireQueryDataTypeToQueryDataTypeDefinition(input.subType),\n                multiplicity: true,\n            };\n        case \"set\":\n            return {\n                type: \"set\",\n                set: wireQueryDataTypeToQueryDataTypeDefinition(input.subType),\n                nullable: false,\n            };\n        case \"union\":\n            const allowNulls = isNullableQueryDataType(input);\n            // special case for a union where one half is nullable to skip the union step and just allow nulls directly\n            if (allowNulls && input.unionTypes.length === 2) {\n                const nonNull = input.unionTypes.find(t => t.type != null);\n                if (nonNull) {\n                    return {\n                        ...wireQueryDataTypeToQueryDataTypeDefinition(nonNull),\n                        nullable: true,\n                    };\n                }\n            }\n            return {\n                type: \"union\",\n                union: input.unionTypes.reduce((acc, t) => {\n                    if (t.type === \"null\") {\n                        return acc;\n                    }\n                    acc.push(wireQueryDataTypeToQueryDataTypeDefinition(t));\n                    return acc;\n                }, []),\n                nullable: allowNulls,\n            };\n        case \"struct\":\n            return {\n                type: \"struct\",\n                struct: Object.fromEntries(input.fields.map(f => [\n                    f.name,\n                    wireQueryDataTypeToQueryDataTypeDefinition(f.fieldType),\n                ])),\n                nullable: false,\n            };\n        case \"twoDimensionalAggregation\":\n            return {\n                type: \"twoDimensionalAggregation\",\n                twoDimensionalAggregation: get2DQueryAggregationProps(input),\n                nullable: false,\n            };\n        case \"threeDimensionalAggregation\":\n            return {\n                type: \"threeDimensionalAggregation\",\n                threeDimensionalAggregation: get3DQueryAggregationProps(input),\n                nullable: false,\n            };\n        case \"null\":\n        case \"unsupported\":\n            throw new Error(`Accidentally tried to handle QueryDataType.type ${input.type}`);\n        default:\n            const _ = input;\n            throw new Error(`Unsupported QueryDataType.type ${input.type}`);\n    }\n}\nfunction get2DQueryAggregationProps(input) {\n    if (input.keyType.type === \"range\") {\n        return {\n            keyType: input.keyType.type,\n            keySubtype: input.keyType.subType.type,\n            valueType: input.valueType.type,\n        };\n    }\n    else {\n        if (guardInvalidKeyTypes(input.keyType)) {\n            return {\n                keyType: input.keyType.type,\n                valueType: input.valueType.type,\n            };\n        }\n        throw new Error(`Cannot create 2D aggregation with ${input.keyType.type} as its type`);\n    }\n}\nfunction get3DQueryAggregationProps(input) {\n    if (input.keyType.type === \"range\") {\n        return {\n            keyType: input.keyType.type,\n            keySubtype: input.keyType.subType.type,\n            valueType: get2DQueryAggregationProps(input.valueType),\n        };\n    }\n    else {\n        if (guardInvalidKeyTypes(input.keyType)) {\n            return {\n                keyType: input.keyType.type,\n                valueType: get2DQueryAggregationProps(input.valueType),\n            };\n        }\n        throw new Error(`Cannot create 3D aggregation with ${input.keyType.type} as its type`);\n    }\n}\n/**\n * Guard against aggregation key types that are allowed by the backend types but are illegal to actually use\n */\nfunction guardInvalidKeyTypes(key) {\n    return key.type === \"string\" || key.type === \"boolean\";\n}\n"],"mappings":"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","ignoreList":[]}