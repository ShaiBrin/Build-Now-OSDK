{"version":3,"file":"createFetchOrThrow.js","names":["PalantirApiError","UnknownError","createFetchOrThrow","fetchFn","fetch","url","requestInit","response","e","convertError","ok","headers","get","text","body","json","message","status","statusText","errorName","errorCode","errorInstanceId","parameters","msgIfNotError","Error"],"sources":["createFetchOrThrow.js"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PalantirApiError, UnknownError } from \"@osdk/shared.net.errors\";\n/**\n * Wraps a fetch plugin so that all errors (including when statusCode is not in the 200s) are converted to either PalantirApiError or UnknownError.\n *\n * If the returned promise does not have an error state, you are free to immediately call `.json()` or equivalent.\n *\n * @param fetchFn\n * @returns\n */\nexport function createFetchOrThrow(fetchFn = fetch) {\n    return async function fetchOrThrow(url, requestInit) {\n        let response;\n        try {\n            response = await fetchFn(url, requestInit);\n        }\n        catch (e) {\n            throw convertError(e, \"A network error occurred\");\n        }\n        if (!response.ok) {\n            if (response.headers.get(\"Content-Type\") === \"text/plain\") {\n                throw new PalantirApiError(await response.text());\n            }\n            let body;\n            try {\n                body = await response.json();\n            }\n            catch (e) {\n                throw convertError(e, \"A network error occurred while reading response\");\n            }\n            throw new PalantirApiError(body?.message\n                ?? `Failed to fetch ${response.status} ${response.statusText}`, body?.errorName, body?.errorCode, response.status, body?.errorInstanceId, body?.parameters);\n        }\n        return response;\n    };\n}\nfunction convertError(e, msgIfNotError = \"An unknown error occurred\") {\n    if (e instanceof Error) {\n        return new UnknownError(e.message, \"UNKNOWN\", e);\n    }\n    return new UnknownError(msgIfNotError, \"UNKNOWN\");\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAgB,EAAEC,YAAY,QAAQ,yBAAyB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,OAAO,GAAGC,KAAK,EAAE;EAChD,OAAO,gBAA4BC,GAAG,EAAEC,WAAW,EAAE;IACjD,IAAIC,QAAQ;IACZ,IAAI;MACAA,QAAQ,GAAG,MAAMJ,OAAO,CAACE,GAAG,EAAEC,WAAW,CAAC;IAC9C,CAAC,CACD,OAAOE,CAAC,EAAE;MACN,MAAMC,YAAY,CAACD,CAAC,EAAE,0BAA0B,CAAC;IACrD;IACA,IAAI,CAACD,QAAQ,CAACG,EAAE,EAAE;MACd,IAAIH,QAAQ,CAACI,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,KAAK,YAAY,EAAE;QACvD,MAAM,IAAIZ,gBAAgB,CAAC,MAAMO,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC;MACrD;MACA,IAAIC,IAAI;MACR,IAAI;QACAA,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAChC,CAAC,CACD,OAAOP,CAAC,EAAE;QACN,MAAMC,YAAY,CAACD,CAAC,EAAE,iDAAiD,CAAC;MAC5E;MACA,MAAM,IAAIR,gBAAgB,CAACc,IAAI,EAAEE,OAAO,IACjC,mBAAmBT,QAAQ,CAACU,MAAM,IAAIV,QAAQ,CAACW,UAAU,EAAE,EAAEJ,IAAI,EAAEK,SAAS,EAAEL,IAAI,EAAEM,SAAS,EAAEb,QAAQ,CAACU,MAAM,EAAEH,IAAI,EAAEO,eAAe,EAAEP,IAAI,EAAEQ,UAAU,CAAC;IACnK;IACA,OAAOf,QAAQ;EACnB,CAAC;AACL;AACA,SAASE,YAAYA,CAACD,CAAC,EAAEe,aAAa,GAAG,2BAA2B,EAAE;EAClE,IAAIf,CAAC,YAAYgB,KAAK,EAAE;IACpB,OAAO,IAAIvB,YAAY,CAACO,CAAC,CAACQ,OAAO,EAAE,SAAS,EAAER,CAAC,CAAC;EACpD;EACA,OAAO,IAAIP,YAAY,CAACsB,aAAa,EAAE,SAAS,CAAC;AACrD","ignoreList":[]}