{"version":3,"file":"SatisfiesSemver.test.js","names":["describe","expectTypeOf","it","toEqualTypeOf"],"sources":["SatisfiesSemver.test.js"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { describe, expectTypeOf, it } from \"vitest\";\ndescribe(\"SatisfiesSemver\", () => {\n    describe(\"SatisfiesSemver type alias\", () => {\n        it(\"has simple examples to review\", () => {\n            expectTypeOf().toEqualTypeOf(true);\n            expectTypeOf().toEqualTypeOf(true);\n            expectTypeOf().toEqualTypeOf(true);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n        });\n        it(\"is true eq major, eq minor, eq patch\", () => {\n            expectTypeOf().toEqualTypeOf(true);\n            expectTypeOf().toEqualTypeOf(true);\n            expectTypeOf().toEqualTypeOf(true);\n            expectTypeOf().toEqualTypeOf(true);\n        });\n        it(\"is true for eq major, eq minor, gt patch\", () => {\n            expectTypeOf().toEqualTypeOf(true);\n        });\n        it(\"is true for eq major, gt minor, any patch\", () => {\n            expectTypeOf().toEqualTypeOf(true);\n            expectTypeOf().toEqualTypeOf(true);\n            expectTypeOf().toEqualTypeOf(true);\n        });\n        it(\"is false for eq major, lt minor, any patch\", () => {\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n        });\n        it(\"is false for gt major, any minor, any patch\", () => {\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n        });\n        it(\"is false for lt major, any minor, any patch\", () => {\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n            expectTypeOf().toEqualTypeOf(false);\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}