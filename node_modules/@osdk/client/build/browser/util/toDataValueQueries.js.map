{"version":3,"file":"toDataValueQueries.js","names":["OntologiesV2","isAttachmentUpload","getWireObjectSet","isObjectSet","isOsdkBaseObject","isWireObjectSet","toDataValueQueries","value","client","desiredType","Array","isArray","multiplicity","promiseArray","from","innerValue","Promise","all","type","attachment","Attachments","upload","filename","name","rid","groups","Set","$primaryKey","structMap","key","structValue","Object","entries"],"sources":["toDataValueQueries.js"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as OntologiesV2 from \"@osdk/internal.foundry.ontologiesv2\";\nimport { isAttachmentUpload } from \"../object/AttachmentUpload.js\";\nimport { getWireObjectSet, isObjectSet } from \"../objectSet/createObjectSet.js\";\nimport { isOsdkBaseObject } from \"./isOsdkBaseObject.js\";\nimport { isWireObjectSet } from \"./WireObjectSet.js\";\n/**\n * Marshall user-facing data into the wire DataValue type\n *\n * @see DataValue for the expected payloads\n * @internal\n */\nexport async function toDataValueQueries(value, client, desiredType) {\n    if (value == null) {\n        return value;\n    }\n    if (Array.isArray(value) && desiredType.multiplicity) {\n        const promiseArray = Array.from(value, async (innerValue) => await toDataValueQueries(innerValue, client, desiredType));\n        return Promise.all(promiseArray);\n    }\n    switch (desiredType.type) {\n        case \"attachment\": {\n            if (isAttachmentUpload(value)) {\n                const attachment = await OntologiesV2.Attachments.upload(client, value, {\n                    filename: value.name,\n                });\n                return attachment.rid;\n            }\n            // If it's not an upload, it's just an attachment rid string which we can pass through\n            return value;\n        }\n        case \"twoDimensionalAggregation\": {\n            return {\n                groups: value,\n            };\n        }\n        case \"threeDimensionalAggregation\": {\n            return {\n                groups: value,\n            };\n        }\n        case \"set\": {\n            if (value instanceof Set) {\n                const promiseArray = Array.from(value, async (innerValue) => await toDataValueQueries(innerValue, client, desiredType[\"set\"]));\n                return Promise.all(promiseArray);\n            }\n            break;\n        }\n        case \"object\": {\n            if (isOsdkBaseObject(value)) {\n                return value.$primaryKey;\n            }\n            break;\n        }\n        case \"objectSet\": {\n            // object set (the rid as a string (passes through the last return), or the ObjectSet definition directly)\n            if (isWireObjectSet(value)) {\n                return value;\n            }\n            if (isObjectSet(value)) {\n                return getWireObjectSet(value);\n            }\n            break;\n        }\n        case \"struct\": {\n            if (typeof value === \"object\") {\n                const structMap = {};\n                for (const [key, structValue] of Object.entries(value)) {\n                    structMap[key] = await toDataValueQueries(structValue, client, desiredType[\"struct\"][key]);\n                }\n                return structMap;\n            }\n        }\n        case \"boolean\":\n        case \"date\":\n        case \"double\":\n        case \"float\":\n        case \"integer\":\n        case \"long\":\n        case \"string\":\n        case \"timestamp\":\n            return value;\n    }\n    return value;\n}\n"],"mappings":"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","ignoreList":[]}