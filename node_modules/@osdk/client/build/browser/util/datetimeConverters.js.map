{"version":3,"file":"datetimeConverters.js","names":["invariant","isoRegex","extractDate","dateTime","length","process","env","NODE_ENV","test","extractDateFromIsoString","extractDateInUTC","date","toISOString","extractDateInLocalTime","generateOffsetUtcString","offsetMs","getTimezoneOffset","Date","getTime","split"],"sources":["datetimeConverters.js"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport invariant from \"tiny-invariant\";\nconst isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?$/;\n/**\n * Extracts the date from a ISO 8601 formatted date time string. Throws if the input is not in the correct format.\n *\n * @param dateTime An ISO 8601 formatted date time string\n * @returns The date part of the input string\n */\nexport const extractDate = (dateTime) => {\n    invariant(dateTime.length < 33, \"Invalid date format. Provided input is too long.\");\n    invariant(isoRegex.test(dateTime), `Invalid date format. Expected ISO 8601 format, but received ${dateTime}`);\n    return extractDateFromIsoString(dateTime);\n};\n/**\n * Generates a string representation of the input date (YYYY-MM-DD). The resulting date string reflects the given date in UTC time.\n *\n * @param date\n * @returns The date part of a ISO 8601 formatted date time string\n */\nexport const extractDateInUTC = (date) => {\n    return extractDateFromIsoString(date.toISOString());\n};\n/**\n * Generates a string representation of the input date (YYYY-MM-DD). The resulting date string reflects the given date in the local time zone.\n *\n * @param date\n * @returns The date part of a ISO 8601 formatted date time string\n */\nexport const extractDateInLocalTime = (date) => {\n    return extractDateFromIsoString(generateOffsetUtcString(date));\n};\n/** @internal */\nexport const generateOffsetUtcString = (date) => {\n    const offsetMs = date.getTimezoneOffset() * 60 * 1000;\n    return new Date(date.getTime() - offsetMs).toISOString();\n};\nconst extractDateFromIsoString = (dateTime) => {\n    return dateTime.split(\"T\")[0];\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,MAAMC,QAAQ,GAAG,uEAAuE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,QAAQ,IAAK;EACrC,EAAUA,QAAQ,CAACC,MAAM,GAAG,EAAE,IAAAC,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA9BP,SAAS,QAAuB,kDAAkD,IAAlFA,SAAS;EACT,CAAUC,QAAQ,CAACO,IAAI,CAACL,QAAQ,CAAC,GAAAE,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAjCP,SAAS,QAA0B,+DAA+DG,QAAQ,EAAE,IAA5GH,SAAS;EACT,OAAOS,wBAAwB,CAACN,QAAQ,CAAC;AAC7C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,gBAAgB,GAAIC,IAAI,IAAK;EACtC,OAAOF,wBAAwB,CAACE,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;AACvD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAIF,IAAI,IAAK;EAC5C,OAAOF,wBAAwB,CAACK,uBAAuB,CAACH,IAAI,CAAC,CAAC;AAClE,CAAC;AACD;AACA,OAAO,MAAMG,uBAAuB,GAAIH,IAAI,IAAK;EAC7C,MAAMI,QAAQ,GAAGJ,IAAI,CAACK,iBAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI;EACrD,OAAO,IAAIC,IAAI,CAACN,IAAI,CAACO,OAAO,CAAC,CAAC,GAAGH,QAAQ,CAAC,CAACH,WAAW,CAAC,CAAC;AAC5D,CAAC;AACD,MAAMH,wBAAwB,GAAIN,QAAQ,IAAK;EAC3C,OAAOA,QAAQ,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC","ignoreList":[]}