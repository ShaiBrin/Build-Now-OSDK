{"version":3,"file":"aggregate.test.js","names":["objectTypeWithAllPropertyTypes","Todo","expectType","beforeAll","describe","expect","expectTypeOf","it","vi","createMinimalClient","aggregate","metadata","expectsClientVersion","ontologyRid","ontologyApiName","userAgent","mockFetch","clientCtx","fn","mockResolvedValue","ok","status","json","Promise","resolve","aggregationResponse","accuracy","data","group","string","metrics","name","value","toEqualTypeOf","notGrouped","type","objectType","$select","toHaveBeenCalledWith","body","JSON","stringify","method","headers","anything","approximateDistinct","exactDistinct","id","max","avg","$count","grouped","$groupBy","$exactWithLimit","integer","$ranges","short","float","$fixedWidth","dateTime","$duration","date","boolean","$group","wrongSelectKey","wrongKey","toBeCallableWith","direction","timestamp"],"sources":["aggregate.test.js"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { objectTypeWithAllPropertyTypes, Todo, } from \"@osdk/client.test.ontology\";\nimport { expectType } from \"ts-expect\";\nimport { beforeAll, describe, expect, expectTypeOf, it, vi, } from \"vitest\";\nimport { createMinimalClient } from \"../createMinimalClient.js\";\nimport { aggregate } from \"./aggregate.js\";\nconst metadata = {\n    expectsClientVersion: \"0.0.0\",\n    ontologyRid: \"ri.a.b.c.d\",\n    ontologyApiName: \"apiName\",\n    userAgent: \"\",\n};\nlet mockFetch;\nlet clientCtx;\nbeforeAll(() => {\n    mockFetch = vi.fn();\n    mockFetch.mockResolvedValue({\n        ok: true,\n        status: 200,\n        json: () => new Promise((resolve) => resolve(aggregationResponse)),\n    });\n    clientCtx = createMinimalClient(metadata, \"https://host.com\", async () => \"\", {}, mockFetch);\n});\nconst aggregationResponse = {\n    accuracy: \"APPROXIMATE\",\n    data: [\n        {\n            group: {\n                string: \"hello\",\n            },\n            metrics: [\n                {\n                    name: \"string.approximateDistinct\",\n                    value: 1,\n                },\n                {\n                    name: \"string.exactDistinct\",\n                    value: 1,\n                },\n                {\n                    name: \"id.max\",\n                    value: 1,\n                },\n                {\n                    name: \"id.avg\",\n                    value: 1,\n                },\n            ],\n        },\n    ],\n};\ndescribe(\"aggregate\", () => {\n    it(\"works\", async () => {\n        expectTypeOf().toEqualTypeOf;\n        const notGrouped = await aggregate(clientCtx, objectTypeWithAllPropertyTypes, {\n            type: \"base\",\n            objectType: \"ToDo\",\n        }, {\n            $select: {\n                \"string:approximateDistinct\": \"unordered\",\n                \"string:exactDistinct\": \"unordered\",\n                \"id:max\": \"unordered\",\n                \"id:avg\": \"unordered\",\n                \"$count\": \"unordered\",\n            },\n        });\n        expect(mockFetch).toHaveBeenCalledWith(\"https://host.com/api/v2/ontologies/ri.a.b.c.d/objectSets/aggregate\", {\n            body: JSON.stringify({\n                \"objectSet\": { \"type\": \"base\", \"objectType\": \"ToDo\" },\n                \"groupBy\": [],\n                \"aggregation\": [\n                    {\n                        \"type\": \"approximateDistinct\",\n                        \"name\": \"string.approximateDistinct\",\n                        \"field\": \"string\",\n                    },\n                    {\n                        \"type\": \"exactDistinct\",\n                        \"name\": \"string.exactDistinct\",\n                        \"field\": \"string\",\n                    },\n                    { \"type\": \"max\", \"name\": \"id.max\", \"field\": \"id\" },\n                    { \"type\": \"avg\", \"name\": \"id.avg\", \"field\": \"id\" },\n                    { \"type\": \"count\", \"name\": \"count\" },\n                ],\n            }),\n            method: \"POST\",\n            headers: expect.anything(),\n        });\n        expectType(notGrouped.string.approximateDistinct);\n        expectType(notGrouped.string.exactDistinct);\n        expectType(notGrouped.id.max);\n        expectType(notGrouped.id.avg);\n        expectType(notGrouped.$count);\n        expectType(false); // subSelect should hide unused keys\n        const grouped = await aggregate(clientCtx, objectTypeWithAllPropertyTypes, {\n            type: \"base\",\n            objectType: \"ToDo\",\n        }, {\n            $select: {\n                \"id:approximateDistinct\": \"unordered\",\n                \"id:exactDistinct\": \"unordered\",\n                \"id:max\": \"unordered\",\n                \"$count\": \"unordered\",\n            },\n            $groupBy: {\n                string: \"exact\",\n                id: { $exactWithLimit: 10 },\n                integer: { $ranges: [[1, 2]] },\n                short: {\n                    $ranges: [[2, 3], [4, 5]],\n                },\n                float: { $fixedWidth: 10 },\n                dateTime: { $duration: [10, \"seconds\"] },\n                date: { $ranges: [[\"2024-01-02\", \"2024-01-09\"]] },\n                boolean: \"exact\",\n            },\n        });\n        expectType(grouped);\n        expectType(grouped[0].$group.string);\n        expectType(grouped[0].id.approximateDistinct);\n        expectType(grouped[0].id.exactDistinct);\n        expectType(grouped[0].$group.id);\n        expectType(grouped[0].$count);\n        expectType(grouped[0].$group.integer);\n        expectType(grouped[0].$group.short);\n        expectType(grouped[0].$group.float);\n        expectType(grouped[0].$group.dateTime);\n        expectType(grouped[0].$group.date);\n        expectType(grouped[0].$group.boolean);\n        expectType({\n            $select: {\n                \"id:approximateDistinct\": \"unordered\",\n                \"$count\": \"unordered\",\n            },\n            $groupBy: {\n                string: \"exact\",\n                id: { $exactWithLimit: 10 },\n                integer: { $ranges: [[1, 2]] },\n                short: {\n                    $ranges: [[2, 3], [4, 5]],\n                },\n                float: { $fixedWidth: 10 },\n            },\n        });\n        expectType({\n            $select: {\n                id: \"approximateDistinct\",\n                // @ts-expect-error\n                wrongSelectKey: \"don't work\",\n                \"$count\": \"unordered\",\n            },\n            $groupBy: {\n                // @ts-expect-error\n                wrongKey: \"don't work\",\n                string: \"exact\",\n                id: { $exactWithLimit: 10 },\n                integer: { $ranges: [[1, 2]] },\n                short: {\n                    $ranges: [[2, 3], [4, 5]],\n                },\n                float: { $fixedWidth: 10 },\n            },\n        });\n        expectTypeOf().toBeCallableWith(clientCtx, objectTypeWithAllPropertyTypes, {\n            type: \"base\",\n            objectType: \"ToDo\",\n        }, {\n            $select: {\n                \"id:approximateDistinct\": \"unordered\",\n                // @ts-expect-error\n                \"wrongSelectKey\": \"don't work\",\n                \"$count\": \"unordered\",\n            },\n            $groupBy: {\n                string: \"exact\",\n                // @ts-expect-error\n                wrongKey: \"wrongKey\",\n                id: { $exactWithLimit: 10 },\n                integer: { $ranges: [[1, 2]] },\n                short: {\n                    $ranges: [[2, 3], [4, 5]],\n                },\n                float: { $fixedWidth: 10 },\n            },\n        });\n        expectType({\n            dateTime: { $duration: [10, \"seconds\"] },\n            date: { $duration: [1, \"years\"] },\n        });\n        // Can't use value greater than 1 for years\n        expectType({\n            // @ts-expect-error\n            date: { $duration: [10, \"years\"] },\n        });\n        // Can't use arbitrary string for time unit\n        expectType({\n            // @ts-expect-error\n            dateTime: { $duration: [1, \"nonexistentTimeUnit\"] },\n        });\n        // Can't use time unit smaller than days for date type\n        expectType({\n            // @ts-expect-error\n            date: { $duration: [1, \"seconds\"] },\n        });\n    });\n    it(\"works with $orderBy (no groups)\", async () => {\n        const notGrouped = await aggregate(clientCtx, objectTypeWithAllPropertyTypes, {\n            type: \"base\",\n            objectType: \"ToDo\",\n        }, {\n            $select: {\n                \"string:approximateDistinct\": \"asc\",\n                \"id:exactDistinct\": \"asc\",\n                \"id:avg\": \"desc\",\n                \"id:max\": \"asc\",\n                \"$count\": \"unordered\",\n            },\n        });\n        expect(mockFetch).toHaveBeenCalledWith(\"https://host.com/api/v2/ontologies/ri.a.b.c.d/objectSets/aggregate\", {\n            body: JSON.stringify({\n                \"objectSet\": { \"type\": \"base\", \"objectType\": \"ToDo\" },\n                \"groupBy\": [],\n                \"aggregation\": [\n                    {\n                        \"type\": \"approximateDistinct\",\n                        \"name\": \"string.approximateDistinct\",\n                        direction: \"ASC\",\n                        \"field\": \"string\",\n                    },\n                    {\n                        \"type\": \"exactDistinct\",\n                        \"name\": \"id.exactDistinct\",\n                        direction: \"ASC\",\n                        \"field\": \"id\",\n                    },\n                    {\n                        \"type\": \"avg\",\n                        \"name\": \"id.avg\",\n                        direction: \"DESC\",\n                        \"field\": \"id\",\n                    },\n                    {\n                        \"type\": \"max\",\n                        \"name\": \"id.max\",\n                        direction: \"ASC\",\n                        \"field\": \"id\",\n                    },\n                    { \"type\": \"count\", \"name\": \"count\" },\n                ],\n            }),\n            method: \"POST\",\n            headers: expect.anything(),\n        });\n        expectType(notGrouped.string.approximateDistinct);\n        expectType(notGrouped.id.exactDistinct);\n        expectType(notGrouped.id.max);\n        expectType(notGrouped.id.avg);\n        expectType(notGrouped.$count);\n        expectType(false); // subselect should hide unused keys\n    });\n    it(\"works with $orderBy (1 group)\", async () => {\n        const grouped = await aggregate(clientCtx, objectTypeWithAllPropertyTypes, {\n            type: \"base\",\n            objectType: \"ToDo\",\n        }, {\n            $select: {\n                \"id:max\": \"desc\",\n                \"string:approximateDistinct\": \"asc\",\n                \"id:avg\": \"unordered\",\n                \"$count\": \"unordered\",\n                \"string:exactDistinct\": \"desc\",\n            },\n            $groupBy: {\n                id: \"exact\",\n            },\n        });\n        expect(mockFetch).toHaveBeenCalledWith(\"https://host.com/api/v2/ontologies/ri.a.b.c.d/objectSets/aggregate\", {\n            body: JSON.stringify({\n                \"objectSet\": { \"type\": \"base\", \"objectType\": \"ToDo\" },\n                \"groupBy\": [{ \"type\": \"exact\", \"field\": \"id\" }],\n                \"aggregation\": [\n                    {\n                        \"type\": \"max\",\n                        \"name\": \"id.max\",\n                        direction: \"DESC\",\n                        \"field\": \"id\",\n                    },\n                    {\n                        \"type\": \"approximateDistinct\",\n                        \"name\": \"string.approximateDistinct\",\n                        direction: \"ASC\",\n                        \"field\": \"string\",\n                    },\n                    { \"type\": \"avg\", \"name\": \"id.avg\", \"field\": \"id\" },\n                    { \"type\": \"count\", \"name\": \"count\" },\n                    {\n                        \"type\": \"exactDistinct\",\n                        \"name\": \"string.exactDistinct\",\n                        direction: \"DESC\",\n                        \"field\": \"string\",\n                    },\n                ],\n            }),\n            method: \"POST\",\n            headers: expect.anything(),\n        });\n        expectType(grouped[0].string.approximateDistinct);\n        expectType(grouped[0].id.max);\n        expectType(grouped[0].id.avg);\n        expectType(grouped[0].$count);\n        expectType(grouped[0].string.exactDistinct);\n        expectType(false); // subselect should hide unused keys\n    });\n    it(\"prohibits ordered select with multiple groupBy\", async () => {\n        aggregate(clientCtx, Todo, {\n            type: \"base\",\n            objectType: \"ToDo\",\n        }, {\n            $select: {\n                // @ts-expect-error\n                \"id:max\": \"desc\",\n                // @ts-expect-error\n                \"text:approximateDistinct\": \"asc\",\n                // @ts-expect-error\n                \"text:exactDistinct\": \"desc\",\n                \"id:avg\": \"unordered\",\n                \"$count\": \"unordered\",\n            },\n            $groupBy: {\n                id: \"exact\",\n                timestamp: \"exact\",\n            },\n        });\n    });\n    it(\"works with where: todo\", async () => {\n        const f = {\n            $select: {\n                \"office:approximateDistinct\": \"unordered\",\n            },\n        };\n    });\n});\n"],"mappings":"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","ignoreList":[]}