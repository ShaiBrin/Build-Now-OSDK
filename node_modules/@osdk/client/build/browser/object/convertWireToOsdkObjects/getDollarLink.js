/*
 * Copyright 2024 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { getWireObjectSet } from "../../objectSet/createObjectSet.js";
import { fetchSingle, fetchSingleWithErrors } from "../fetchSingle.js";
import { ClientRef, ObjectDefRef, RawObject } from "./InternalSymbols.js";
/** @internal */
export function get$link(holder) {
  return new Proxy(holder, DollarLinkProxyHandler);
}
const DollarLinkProxyHandler = {
  get(target, p) {
    const {
      [ObjectDefRef]: objDef,
      [ClientRef]: client,
      [RawObject]: rawObj
    } = target;
    const linkDef = objDef.links[p];
    if (linkDef == null) {
      return;
    }
    const objectSet = client.objectSetFactory(objDef, client).where({
      [objDef.primaryKeyApiName]: rawObj.$primaryKey
    }).pivotTo(p);
    if (!linkDef.multiplicity) {
      return {
        fetchOne: options => fetchSingle(client, objDef, options ?? {}, getWireObjectSet(objectSet)),
        fetchOneWithErrors: options => fetchSingleWithErrors(client, objDef, options ?? {}, getWireObjectSet(objectSet))
      };
    } else {
      return objectSet;
    }
  },
  ownKeys(target) {
    return [...Object.keys(target[ObjectDefRef].links)];
  },
  getOwnPropertyDescriptor(target, p) {
    if (target[ObjectDefRef].links[p]) {
      return {
        enumerable: true,
        configurable: true,
        // fixme
        writable: false
      };
    }
  }
};
//# sourceMappingURL=getDollarLink.js.map