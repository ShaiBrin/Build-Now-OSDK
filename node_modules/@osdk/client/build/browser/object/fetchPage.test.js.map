{"version":3,"file":"fetchPage.test.js","names":["Todo","describe","expect","expectTypeOf","it","createMinimalClient","fetchPage","objectSetToSearchJsonV2","createObjectSet","getWireObjectSet","metadata","ontologyRid","branded","toEqualTypeOf","type","objectSet","objectType","where","field","value","undefined","toEqual","client","text","id","$gt","wireObjectSet"],"sources":["fetchPage.test.js"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Todo } from \"@osdk/client.test.ontology\";\nimport { describe, expect, expectTypeOf, it } from \"vitest\";\nimport { createMinimalClient } from \"../createMinimalClient.js\";\nimport { fetchPage, objectSetToSearchJsonV2 } from \"../object/fetchPage.js\";\nimport { createObjectSet, getWireObjectSet, } from \"../objectSet/createObjectSet.js\";\nconst metadata = {\n    ontologyRid: \"asdf\",\n};\ndescribe(fetchPage, () => {\n    it(\"infers select properly\", () => {\n        // this helper lets us get return types of functions that are generic\n        class Helper {\n            fetchPage() {\n                return fetchPage({}, {}, {});\n            }\n        }\n        expectTypeOf()\n            .branded\n            .toEqualTypeOf();\n        // e.g. fetchPage({ select: [] });\n        expectTypeOf()\n            .branded\n            .toEqualTypeOf();\n        // e.g. fetchPage()\n        expectTypeOf()\n            .branded\n            .toEqualTypeOf();\n        // e.g. fetchPage({ $select: [\"text\"]}\n        expectTypeOf()\n            .branded\n            .toEqualTypeOf();\n    });\n    it(\"converts interface objectsets to search properly\", () => {\n        expect(objectSetToSearchJsonV2({\n            type: \"filter\",\n            objectSet: {\n                type: \"filter\",\n                objectSet: {\n                    type: \"base\",\n                    objectType: \"Todo\",\n                },\n                where: {\n                    type: \"eq\",\n                    field: \"text\",\n                    value: \"hello\",\n                },\n            },\n            where: {\n                type: \"gt\",\n                field: \"id\",\n                value: 2,\n            },\n        }, \"Todo\", undefined)).toEqual({\n            type: \"and\",\n            value: [\n                {\n                    type: \"gt\",\n                    field: \"id\",\n                    value: 2,\n                },\n                {\n                    type: \"eq\",\n                    field: \"text\",\n                    value: \"hello\",\n                },\n            ],\n        });\n    });\n    it(\"converts interface objectsets to search properly part 2\", () => {\n        const client = createMinimalClient(metadata, \"https://foo\", async () => \"\");\n        const objectSet = createObjectSet(Todo, client).where({\n            text: \"hello\",\n        }).where({\n            id: { $gt: 2 },\n        });\n        const wireObjectSet = getWireObjectSet(objectSet);\n        expect(objectSetToSearchJsonV2(wireObjectSet, \"Todo\", undefined)).toEqual({\n            type: \"and\",\n            value: [\n                {\n                    type: \"gt\",\n                    field: \"id\",\n                    value: 2,\n                },\n                {\n                    type: \"eq\",\n                    field: \"text\",\n                    value: \"hello\",\n                },\n            ],\n        });\n    });\n    describe(\"includeRid\", () => {\n        it(\"properly returns the correct string for includeRid\", () => {\n            expectTypeOf()\n                .toEqualTypeOf();\n            expectTypeOf()\n                .branded\n                .toEqualTypeOf();\n        });\n        it(\"works with $all\", () => {\n            expectTypeOf().branded\n                .toEqualTypeOf();\n            expectTypeOf()\n                .branded\n                .toEqualTypeOf();\n            expectTypeOf()\n                .branded\n                .toEqualTypeOf();\n            expectTypeOf()\n                .branded\n                .toEqualTypeOf();\n            expectTypeOf()\n                .branded\n                .toEqualTypeOf();\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}