{"version":3,"file":"modernToLegacyWhereClause.test.js","names":["objectTypeWithAllPropertyTypes","expectType","describe","expect","it","modernToLegacyWhereClause","r","prop","type","apiName","toMatchInlineSnapshot","foo","geoPoint","$within","$bbox","$distance","$of","coordinates","$polygon","geoShape","$intersects","integer","$ne","decimal","$and","$or"],"sources":["modernToLegacyWhereClause.test.js"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { objectTypeWithAllPropertyTypes } from \"@osdk/client.test.ontology\";\nimport { expectType } from \"ts-expect\";\nimport { describe, expect, it } from \"vitest\";\nimport { modernToLegacyWhereClause } from \"./modernToLegacyWhereClause.js\";\ndescribe(modernToLegacyWhereClause, () => {\n    describe(\"api namespaces\", () => {\n        describe(\"interfaces\", () => {\n            it(\"properly converts shortname to fqApiName\", () => {\n                const T = {\n                    type: \"interface\",\n                    apiName: \"a.Foo\",\n                };\n                const r = modernToLegacyWhereClause({\n                    prop: 5,\n                }, T);\n                expect(r).toMatchInlineSnapshot(`\n          {\n            \"field\": \"a.prop\",\n            \"type\": \"eq\",\n            \"value\": 5,\n          }\n        `);\n            });\n            it(\"properly does not convert when interface has no apiNamespace\", () => {\n                const T = {\n                    type: \"interface\",\n                    apiName: \"Foo\",\n                };\n                const r = modernToLegacyWhereClause({\n                    \"b.prop\": 5,\n                    foo: 6,\n                }, T);\n                expect(r).toMatchInlineSnapshot(`\n          {\n            \"type\": \"and\",\n            \"value\": [\n              {\n                \"field\": \"b.prop\",\n                \"type\": \"eq\",\n                \"value\": 5,\n              },\n              {\n                \"field\": \"foo\",\n                \"type\": \"eq\",\n                \"value\": 6,\n              },\n            ],\n          }\n        `);\n            });\n            it(\"gracefully handles redundant apiNamespace in property\", () => {\n                const T = {\n                    type: \"interface\",\n                    apiName: \"a.Foo\",\n                };\n                const r = modernToLegacyWhereClause({\n                    \"b.prop\": 5,\n                    \"a.foo\": 6,\n                }, T);\n                expect(r).toMatchInlineSnapshot(`\n          {\n            \"type\": \"and\",\n            \"value\": [\n              {\n                \"field\": \"b.prop\",\n                \"type\": \"eq\",\n                \"value\": 5,\n              },\n              {\n                \"field\": \"a.foo\",\n                \"type\": \"eq\",\n                \"value\": 6,\n              },\n            ],\n          }\n        `);\n            });\n            it(\"properly does not convert different apiNamespaces\", () => {\n                const T = {\n                    type: \"interface\",\n                    apiName: \"a.Foo\",\n                };\n                expect(modernToLegacyWhereClause({\n                    \"b.prop\": 5,\n                }, T)).toMatchInlineSnapshot(`\n          {\n            \"field\": \"b.prop\",\n            \"type\": \"eq\",\n            \"value\": 5,\n          }\n        `);\n            });\n        });\n        describe(\"objects\", () => {\n            it(\"does not convert object short property names to fq\", () => {\n                const T = {\n                    type: \"object\",\n                    apiName: \"a.Foo\",\n                };\n                const r = modernToLegacyWhereClause({\n                    prop: 5,\n                }, T);\n                expect(r).toMatchInlineSnapshot(`\n          {\n            \"field\": \"prop\",\n            \"type\": \"eq\",\n            \"value\": 5,\n          }\n        `);\n            });\n        });\n    });\n    describe(\"single checks\", () => {\n        describe(\"$within\", () => {\n            it(\"properly generates bbox shortcut\", async () => {\n                expect(modernToLegacyWhereClause({\n                    geoPoint: {\n                        $within: [-5, 5, -10, 10],\n                    },\n                }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n          {\n            \"field\": \"geoPoint\",\n            \"type\": \"withinBoundingBox\",\n            \"value\": {\n              \"bottomRight\": {\n                \"coordinates\": [\n                  -10,\n                  5,\n                ],\n                \"type\": \"Point\",\n              },\n              \"topLeft\": {\n                \"coordinates\": [\n                  -5,\n                  10,\n                ],\n                \"type\": \"Point\",\n              },\n            },\n          }\n        `);\n            });\n            it(\"properly generates bbox long form\", async () => {\n                expect(modernToLegacyWhereClause({\n                    geoPoint: {\n                        $within: {\n                            $bbox: [-5, 5, -10, 10],\n                        },\n                    },\n                }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n          {\n            \"field\": \"geoPoint\",\n            \"type\": \"withinBoundingBox\",\n            \"value\": {\n              \"bottomRight\": {\n                \"coordinates\": [\n                  -10,\n                  5,\n                ],\n                \"type\": \"Point\",\n              },\n              \"topLeft\": {\n                \"coordinates\": [\n                  -5,\n                  10,\n                ],\n                \"type\": \"Point\",\n              },\n            },\n          }\n        `);\n            });\n            it(\"properly generates within radius\", async () => {\n                expect(modernToLegacyWhereClause({\n                    geoPoint: {\n                        $within: { $distance: [5, \"km\"], $of: [-5, 5] },\n                    },\n                }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"field\": \"geoPoint\",\n          \"type\": \"withinDistanceOf\",\n          \"value\": {\n            \"center\": {\n              \"coordinates\": [\n                -5,\n                5,\n              ],\n              \"type\": \"Point\",\n            },\n            \"distance\": {\n              \"unit\": \"KILOMETERS\",\n              \"value\": 5,\n            },\n          },\n        }\n      `);\n            });\n            it(\"properly generates within radius of geopoint\", async () => {\n                // suppose you loaded an object with a geopoint field\n                // and you want to find all objects within 5 km of that point\n                const pointAsGeoJsonPoint = {\n                    type: \"Point\",\n                    coordinates: [-5, 5],\n                };\n                expect(modernToLegacyWhereClause({\n                    geoPoint: {\n                        $within: { $distance: [5, \"km\"], $of: pointAsGeoJsonPoint },\n                    },\n                }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"field\": \"geoPoint\",\n          \"type\": \"withinDistanceOf\",\n          \"value\": {\n            \"center\": {\n              \"coordinates\": [\n                -5,\n                5,\n              ],\n              \"type\": \"Point\",\n            },\n            \"distance\": {\n              \"unit\": \"KILOMETERS\",\n              \"value\": 5,\n            },\n          },\n        }\n      `);\n            });\n            it(\"properly generates within polygon\", async () => {\n                expect(modernToLegacyWhereClause({\n                    geoPoint: {\n                        $within: { $polygon: [[[0, 1], [3, 2], [0, 1]]] },\n                    },\n                }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n          {\n            \"field\": \"geoPoint\",\n            \"type\": \"withinPolygon\",\n            \"value\": {\n              \"coordinates\": [\n                [\n                  [\n                    0,\n                    1,\n                  ],\n                  [\n                    3,\n                    2,\n                  ],\n                  [\n                    0,\n                    1,\n                  ],\n                ],\n              ],\n              \"type\": \"Polygon\",\n            },\n          }\n        `);\n            });\n            it(\"properly generates within polygon geojson\", async () => {\n                expect(modernToLegacyWhereClause({\n                    geoPoint: {\n                        $within: {\n                            type: \"Polygon\",\n                            coordinates: [[[0, 1], [3, 2], [0, 1]]],\n                        },\n                    },\n                }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n          {\n            \"field\": \"geoPoint\",\n            \"type\": \"withinPolygon\",\n            \"value\": {\n              \"coordinates\": [\n                [\n                  [\n                    0,\n                    1,\n                  ],\n                  [\n                    3,\n                    2,\n                  ],\n                  [\n                    0,\n                    1,\n                  ],\n                ],\n              ],\n              \"type\": \"Polygon\",\n            },\n          }\n        `);\n            });\n            it(\"check types\", async () => {\n                expectType({\n                    geoPoint: {\n                        $within: [-5, 5, -10, 10],\n                    },\n                });\n                expectType({\n                    geoPoint: {\n                        $within: { $distance: [2, \"centimeter\"], $of: [2, 2] },\n                    },\n                });\n                expectType({\n                    geoPoint: {\n                        $within: { $polygon: [[[0, 1], [3, 2], [0, 1]]] },\n                    },\n                });\n                expectType({\n                    geoPoint: {\n                        $within: {\n                            type: \"Polygon\",\n                            coordinates: [[[0, 1], [3, 2], [0, 1]]],\n                        },\n                    },\n                });\n                expectType({\n                    geoPoint: {\n                        $within: { $bbox: [-5, 5, -10, 10] },\n                    },\n                });\n                expectType({\n                    geoPoint: {\n                        $within: {\n                            $bbox: [-5, 5, -10, 10],\n                            // @ts-expect-error\n                            $distance: [2, \"centimeter\"],\n                            // @ts-expect-error\n                            $of: [2, 2],\n                        },\n                    },\n                });\n                expectType({\n                    geoPoint: {\n                        $within: {\n                            $polygon: [[[0, 1], [3, 2], [0, 1]]],\n                            // @ts-expect-error\n                            $bbox: [2, 2, 2, 2],\n                        },\n                    },\n                });\n            });\n            describe(\"$intersects\", () => {\n                it(\"properly generates bbox shortcut\", async () => {\n                    expect(modernToLegacyWhereClause({\n                        geoShape: {\n                            $intersects: [-5, 5, -10, 10],\n                        },\n                    }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"field\": \"geoShape\",\n          \"type\": \"intersectsBoundingBox\",\n          \"value\": {\n            \"bottomRight\": {\n              \"coordinates\": [\n                -10,\n                5,\n              ],\n              \"type\": \"Point\",\n            },\n            \"topLeft\": {\n              \"coordinates\": [\n                -5,\n                10,\n              ],\n              \"type\": \"Point\",\n            },\n          },\n        }\n      `);\n                });\n                it(\"properly generates bbox long form\", async () => {\n                    expect(modernToLegacyWhereClause({\n                        geoShape: {\n                            $intersects: {\n                                $bbox: [-5, 5, -10, 10],\n                            },\n                        },\n                    }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n          {\n            \"field\": \"geoShape\",\n            \"type\": \"intersectsBoundingBox\",\n            \"value\": {\n              \"bottomRight\": {\n                \"coordinates\": [\n                  -10,\n                  5,\n                ],\n                \"type\": \"Point\",\n              },\n              \"topLeft\": {\n                \"coordinates\": [\n                  -5,\n                  10,\n                ],\n                \"type\": \"Point\",\n              },\n            },\n          }\n        `);\n                });\n                it(\"properly generates intersects polygon\", async () => {\n                    expect(modernToLegacyWhereClause({\n                        geoShape: {\n                            $intersects: { $polygon: [[[0, 1], [3, 2], [0, 1]]] },\n                        },\n                    }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n            {\n              \"field\": \"geoShape\",\n              \"type\": \"intersectsPolygon\",\n              \"value\": {\n                \"coordinates\": [\n                  [\n                    [\n                      0,\n                      1,\n                    ],\n                    [\n                      3,\n                      2,\n                    ],\n                    [\n                      0,\n                      1,\n                    ],\n                  ],\n                ],\n                \"type\": \"Polygon\",\n              },\n            }\n          `);\n                });\n                it(\"properly generates within polygon geojson\", async () => {\n                    expect(modernToLegacyWhereClause({\n                        geoShape: {\n                            $intersects: {\n                                type: \"Polygon\",\n                                coordinates: [[[0, 1], [3, 2], [0, 1]]],\n                            },\n                        },\n                    }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n            {\n              \"field\": \"geoShape\",\n              \"type\": \"intersectsPolygon\",\n              \"value\": {\n                \"coordinates\": [\n                  [\n                    [\n                      0,\n                      1,\n                    ],\n                    [\n                      3,\n                      2,\n                    ],\n                    [\n                      0,\n                      1,\n                    ],\n                  ],\n                ],\n                \"type\": \"Polygon\",\n              },\n            }\n          `);\n                });\n            });\n            it(\"inverts ne short hand properly\", () => {\n                expect(modernToLegacyWhereClause({\n                    integer: { $ne: 5 },\n                }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"type\": \"not\",\n          \"value\": {\n            \"field\": \"integer\",\n            \"type\": \"eq\",\n            \"value\": 5,\n          },\n        }\n      `);\n            });\n        });\n        describe(\"multiple checks\", () => {\n            it(\"properly handles multiple simple where checks\", () => {\n                expect(modernToLegacyWhereClause({\n                    decimal: 5,\n                    integer: 10,\n                }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n        {\n          \"type\": \"and\",\n          \"value\": [\n            {\n              \"field\": \"decimal\",\n              \"type\": \"eq\",\n              \"value\": 5,\n            },\n            {\n              \"field\": \"integer\",\n              \"type\": \"eq\",\n              \"value\": 10,\n            },\n          ],\n        }\n      `);\n            });\n            it(\"properly handles $and\", () => {\n                expect(modernToLegacyWhereClause({\n                    $and: [{\n                            decimal: 5,\n                        }, {\n                            integer: 10,\n                        }],\n                }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n          {\n            \"type\": \"and\",\n            \"value\": [\n              {\n                \"field\": \"decimal\",\n                \"type\": \"eq\",\n                \"value\": 5,\n              },\n              {\n                \"field\": \"integer\",\n                \"type\": \"eq\",\n                \"value\": 10,\n              },\n            ],\n          }\n        `);\n            });\n            it(\"properly handles $or\", () => {\n                expect(modernToLegacyWhereClause({\n                    $or: [{\n                            decimal: 5,\n                        }, {\n                            integer: 10,\n                        }],\n                }, objectTypeWithAllPropertyTypes)).toMatchInlineSnapshot(`\n            {\n              \"type\": \"or\",\n              \"value\": [\n                {\n                  \"field\": \"decimal\",\n                  \"type\": \"eq\",\n                  \"value\": 5,\n                },\n                {\n                  \"field\": \"integer\",\n                  \"type\": \"eq\",\n                  \"value\": 10,\n                },\n              ],\n            }\n          `);\n            });\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}