import type { Subprocess } from "execa";
import { EventEmitter } from "node:events";
import { server as s } from "typescript";
import type { Logger } from "./Logger.js";
declare class TsServerImpl extends EventEmitter<{
    exit: [];
}> {
    #private;
    constructor(tsServerPath: string, logger: Logger);
    get subprocess(): Subprocess<{
        ipc: true;
        serialization: "json";
    }> | undefined;
    start(): Promise<this>;
    stop(): void;
    getOneMessage<X>(filter?: (m: unknown) => m is X): Promise<X>;
    sendOpenRequest: (args: s.protocol.OpenRequestArgs) => Promise<{
        req: s.protocol.OpenRequest;
        resp: never;
    }>;
    sendQuickInfoRequest: (args: s.protocol.FileLocationRequestArgs) => Promise<{
        req: s.protocol.QuickInfoRequest;
        resp: s.protocol.QuickInfoResponse;
    }>;
}
export type TsServer = Omit<TsServerImpl, Exclude<keyof EventEmitter, "on" | "addListener" | "off" | "once" | "removeListener" | "removeAllListeners">>;
export declare function startTsServer(logger: Logger): Promise<TsServer>;
export declare function isEvent(m: unknown): m is s.protocol.Event;
export declare function isResponse(m: unknown): m is s.protocol.Response;
export declare function isProjectLoadingStart(m: unknown): m is s.protocol.ProjectLoadingStartEvent;
export declare function isProjectLoadingEnd(m: unknown): m is s.protocol.ProjectLoadingStartEvent;
export declare function isQuickInfoResponse(m: unknown, requestSeq?: number): m is s.protocol.QuickInfoResponse;
export {};
//# sourceMappingURL=tsserver.d.ts.map