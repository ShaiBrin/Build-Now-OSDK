{"version":3,"file":"StandardOntologyProvider.test.js","names":["$ontologyRid","Employee","apiServer","afterAll","beforeAll","describe","expect","it","createMinimalClient","fetchPage","createStandardOntologyProviderFactory","listen","close","client","ontologyRid","loads","events","on","request","push","URL","url","pathname","toEqual"],"sources":["StandardOntologyProvider.test.js"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { $ontologyRid, Employee } from \"@osdk/client.test.ontology\";\nimport { apiServer } from \"@osdk/shared.test\";\nimport { afterAll, beforeAll, describe, expect, it } from \"vitest\";\nimport { createMinimalClient } from \"../createMinimalClient.js\";\nimport { fetchPage } from \"../object/fetchPage.js\";\nimport { createStandardOntologyProviderFactory, } from \"./StandardOntologyProvider.js\";\ndescribe(createStandardOntologyProviderFactory, () => {\n    beforeAll(async () => {\n        apiServer.listen();\n    });\n    afterAll(() => {\n        apiServer.close();\n    });\n    it(\"doesn't revalidate if not needed\", async () => {\n        const client = createMinimalClient({ ontologyRid: $ontologyRid }, \"https://stack.palantir.com\", async () => \"myAccessToken\");\n        let loads = [];\n        apiServer.events.on(\"request:start\", ({ request }) => {\n            loads.push(new URL(request.url).pathname);\n        });\n        await fetchPage(client, Employee, {});\n        // first load should lookup employee and its link types\n        expect(loads).toEqual([\n            \"/api/v2/ontologies/ri.ontology.main.ontology.698267cc-6b48-4d98-beff-29beb24e9361/objectSets/loadObjects\",\n            \"/api/v2/ontologies/ri.ontology.main.ontology.698267cc-6b48-4d98-beff-29beb24e9361/objectTypes/Employee/fullMetadata\",\n            \"/api/v2/ontologies/ri.ontology.main.ontology.698267cc-6b48-4d98-beff-29beb24e9361/interfaceTypes/FooInterface\",\n        ]);\n        loads = [];\n        await fetchPage(client, Employee, {});\n        // second load should not need to load ontology info\n        expect(loads).toEqual([\n            \"/api/v2/ontologies/ri.ontology.main.ontology.698267cc-6b48-4d98-beff-29beb24e9361/objectSets/loadObjects\",\n        ]);\n    });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,EAAEC,QAAQ,QAAQ,4BAA4B;AACnE,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,QAAQ;AAClE,SAASC,mBAAmB,QAAQ,2BAA2B;AAC/D,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,qCAAqC,QAAS,+BAA+B;AACtFL,QAAQ,CAACK,qCAAqC,EAAE,MAAM;EAClDN,SAAS,CAAC,YAAY;IAClBF,SAAS,CAACS,MAAM,CAAC,CAAC;EACtB,CAAC,CAAC;EACFR,QAAQ,CAAC,MAAM;IACXD,SAAS,CAACU,KAAK,CAAC,CAAC;EACrB,CAAC,CAAC;EACFL,EAAE,CAAC,kCAAkC,EAAE,YAAY;IAC/C,MAAMM,MAAM,GAAGL,mBAAmB,CAAC;MAAEM,WAAW,EAAEd;IAAa,CAAC,EAAE,4BAA4B,EAAE,YAAY,eAAe,CAAC;IAC5H,IAAIe,KAAK,GAAG,EAAE;IACdb,SAAS,CAACc,MAAM,CAACC,EAAE,CAAC,eAAe,EAAE,CAAC;MAAEC;IAAQ,CAAC,KAAK;MAClDH,KAAK,CAACI,IAAI,CAAC,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACC,QAAQ,CAAC;IAC7C,CAAC,CAAC;IACF,MAAMb,SAAS,CAACI,MAAM,EAAEZ,QAAQ,EAAE,CAAC,CAAC,CAAC;IACrC;IACAK,MAAM,CAACS,KAAK,CAAC,CAACQ,OAAO,CAAC,CAClB,0GAA0G,EAC1G,qHAAqH,EACrH,+GAA+G,CAClH,CAAC;IACFR,KAAK,GAAG,EAAE;IACV,MAAMN,SAAS,CAACI,MAAM,EAAEZ,QAAQ,EAAE,CAAC,CAAC,CAAC;IACrC;IACAK,MAAM,CAACS,KAAK,CAAC,CAACQ,OAAO,CAAC,CAClB,0GAA0G,CAC7G,CAAC;EACN,CAAC,CAAC;AACN,CAAC,CAAC","ignoreList":[]}