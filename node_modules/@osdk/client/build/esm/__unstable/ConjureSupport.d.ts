import type { DirectedLinkTypeRid } from "@osdk/client.unstable";
import type { MinimalClient } from "../MinimalClientContext.js";
export type ObjectPropertyMapping = {
    apiName: string;
    id: string;
    propertyIdToApiNameMapping: Record<string, string>;
    propertyApiNameToIdMapping: Record<string, string>;
};
export declare class MetadataClient {
    #private;
    constructor(client: MinimalClient);
    forObjectByRid: (key: string) => Promise<{
        getPropertyMapping: () => Promise<{
            apiName: string;
            id: string;
            propertyIdToApiNameMapping: Record<string, string>;
            propertyApiNameToIdMapping: Record<string, string>;
            pk: {
                rid: string;
                apiName: string;
                type: import("@osdk/client.unstable").Type;
            };
        }>;
        getLinkMapping: () => Promise<Record<string, {
            apiName: string;
            directedLinkTypeRid: DirectedLinkTypeRid;
            otherObjectType: string;
        }>>;
        getRid: () => string;
        getApiName: () => Promise<string | undefined>;
    }>;
    forObjectByApiName: (key: string) => Promise<{
        getPropertyMapping: () => Promise<{
            apiName: string;
            id: string;
            propertyIdToApiNameMapping: Record<string, string>;
            propertyApiNameToIdMapping: Record<string, string>;
            pk: {
                rid: string;
                apiName: string;
                type: import("@osdk/client.unstable").Type;
            };
        }>;
        getLinkMapping: () => Promise<Record<string, {
            apiName: string;
            directedLinkTypeRid: DirectedLinkTypeRid;
            otherObjectType: string;
        }>>;
        getRid: () => string;
        getApiName: () => Promise<string | undefined>;
    }>;
    ontologyVersion: (key: string) => Promise<string>;
}
export declare const metadataCacheClient: (key: MinimalClient) => Promise<MetadataClient>;
//# sourceMappingURL=ConjureSupport.d.ts.map