{"version":3,"file":"datetimeConverters.test.js","names":["register","unregister","afterAll","beforeAll","describe","expect","it","extractDate","extractDateInLocalTime","extractDateInUTC","generateOffsetUtcString","toThrowError","result","toBe","date","Date","getDate","getUTCDate"],"sources":["datetimeConverters.test.js"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { register, unregister } from \"timezone-mock\";\nimport { afterAll, beforeAll, describe, expect, it, } from \"vitest\";\nimport { extractDate, extractDateInLocalTime, extractDateInUTC, generateOffsetUtcString, } from \"./datetimeConverters.js\";\ndescribe(\"test datetime converters\", () => {\n    beforeAll(() => {\n        register(\"Etc/GMT+5\");\n    });\n    afterAll(() => {\n        unregister();\n    });\n    describe(\"test extractDate\", () => {\n        it(\"should error if the date is not in UTC format\", () => {\n            expect(() => extractDate(\"2021-01-01\")).toThrowError(\"Invariant failed: Invalid date format. Expected ISO 8601 format, but received 2021-01-01\");\n            expect(() => extractDate(\"2021-01-01T00:0000.000Z\")).toThrowError(\"Invariant failed: Invalid date format. Expected ISO 8601 format, but received 2021-01-01\");\n        });\n        it(\"should return the date part of the input string\", () => {\n            const result = extractDate(\"2021-01-01T00:00:00.000Z\");\n            expect(result).toBe(\"2021-01-01\");\n        });\n    });\n    describe(\"test extractDateInUTC\", () => {\n        it(\"should return the date in UTC given Date constructed with UTC time\", () => {\n            const date = new Date(\"2021-01-01T00:00:00.000Z\");\n            expect(date.getDate()).toBe(31);\n            expect(date.getUTCDate()).toBe(1);\n            const result = extractDateInUTC(date);\n            expect(result).toBe(\"2021-01-01\");\n        });\n        it(\"should return the date in UTC given Date constructed with a local time\", () => {\n            const date = new Date(\"2020-12-31T23:00:00.000\");\n            expect(date.getDate()).toBe(31);\n            expect(date.getUTCDate()).toBe(1);\n            const result = extractDateInUTC(date);\n            expect(result).toBe(\"2021-01-01\");\n        });\n    });\n    describe(\"test extractDateInLocalTime\", () => {\n        it(\"should return the date in local time given Date constructed with local time\", () => {\n            const date = new Date(\"2020-12-31T23:00:00.000\");\n            expect(date.getDate()).toBe(31);\n            const result = extractDateInLocalTime(date);\n            expect(result).toBe(\"2020-12-31\");\n        });\n        describe(\"test generating ISO String\", () => {\n            it(\"should return a correct ISO 8601 string that is offset correctly\", () => {\n                const date = new Date(\"2021-01-01T00:00:00.000Z\");\n                expect(date.getDate()).toBe(31);\n                const result = generateOffsetUtcString(date);\n                expect(result).toBe(\"2020-12-31T19:00:00.000Z\");\n            });\n        });\n        it(\"should return the date in local time given Date constructed with UTC time\", () => {\n            const date = new Date(\"2021-01-01T00:00:00.000Z\");\n            expect(date.getDate()).toBe(31);\n            const result = extractDateInLocalTime(date);\n            expect(result).toBe(\"2020-12-31\");\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}