{"version":3,"file":"modernToLegacyGroupByClause.js","names":["DurationMapping","modernToLegacyGroupByClause","groupByClause","Object","entries","flatMap","field","type","maxGroupCount","$exactWithLimit","fixedWidth","$fixedWidth","ranges","$ranges","map","range","convertRange","value","$duration","unit","startValue","endValue"],"sources":["modernToLegacyGroupByClause.js"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DurationMapping } from \"@osdk/api\";\n/** @internal */\nexport function modernToLegacyGroupByClause(groupByClause) {\n    if (!groupByClause)\n        return [];\n    return Object.entries(groupByClause).flatMap(([field, type]) => {\n        if (type === \"exact\") {\n            return [{ type, field }];\n        }\n        else if (\"$exactWithLimit\" in type) {\n            {\n                return [\n                    {\n                        type: \"exact\",\n                        field,\n                        maxGroupCount: type.$exactWithLimit,\n                    },\n                ];\n            }\n        }\n        else if (\"$fixedWidth\" in type) {\n            return [{\n                    type: \"fixedWidth\",\n                    field,\n                    fixedWidth: type.$fixedWidth,\n                }];\n        }\n        else if (\"$ranges\" in type) {\n            return [{\n                    type: \"ranges\",\n                    field,\n                    ranges: type.$ranges.map(range => convertRange(range)),\n                }];\n        }\n        else if (\"$duration\" in type) {\n            return [{\n                    type: \"duration\",\n                    field,\n                    value: type.$duration[0],\n                    unit: DurationMapping[type.$duration[1]],\n                }];\n        }\n        else\n            return [];\n    });\n}\nfunction convertRange(range) {\n    return { startValue: range[0], endValue: range[1] };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,WAAW;AAC3C;AACA,OAAO,SAASC,2BAA2BA,CAACC,aAAa,EAAE;EACvD,IAAI,CAACA,aAAa,EACd,OAAO,EAAE;EACb,OAAOC,MAAM,CAACC,OAAO,CAACF,aAAa,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,KAAK,EAAEC,IAAI,CAAC,KAAK;IAC5D,IAAIA,IAAI,KAAK,OAAO,EAAE;MAClB,OAAO,CAAC;QAAEA,IAAI;QAAED;MAAM,CAAC,CAAC;IAC5B,CAAC,MACI,IAAI,iBAAiB,IAAIC,IAAI,EAAE;MAChC;QACI,OAAO,CACH;UACIA,IAAI,EAAE,OAAO;UACbD,KAAK;UACLE,aAAa,EAAED,IAAI,CAACE;QACxB,CAAC,CACJ;MACL;IACJ,CAAC,MACI,IAAI,aAAa,IAAIF,IAAI,EAAE;MAC5B,OAAO,CAAC;QACAA,IAAI,EAAE,YAAY;QAClBD,KAAK;QACLI,UAAU,EAAEH,IAAI,CAACI;MACrB,CAAC,CAAC;IACV,CAAC,MACI,IAAI,SAAS,IAAIJ,IAAI,EAAE;MACxB,OAAO,CAAC;QACAA,IAAI,EAAE,QAAQ;QACdD,KAAK;QACLM,MAAM,EAAEL,IAAI,CAACM,OAAO,CAACC,GAAG,CAACC,KAAK,IAAIC,YAAY,CAACD,KAAK,CAAC;MACzD,CAAC,CAAC;IACV,CAAC,MACI,IAAI,WAAW,IAAIR,IAAI,EAAE;MAC1B,OAAO,CAAC;QACAA,IAAI,EAAE,UAAU;QAChBD,KAAK;QACLW,KAAK,EAAEV,IAAI,CAACW,SAAS,CAAC,CAAC,CAAC;QACxBC,IAAI,EAAEnB,eAAe,CAACO,IAAI,CAACW,SAAS,CAAC,CAAC,CAAC;MAC3C,CAAC,CAAC;IACV,CAAC,MAEG,OAAO,EAAE;EACjB,CAAC,CAAC;AACN;AACA,SAASF,YAAYA,CAACD,KAAK,EAAE;EACzB,OAAO;IAAEK,UAAU,EAAEL,KAAK,CAAC,CAAC,CAAC;IAAEM,QAAQ,EAAEN,KAAK,CAAC,CAAC;EAAE,CAAC;AACvD","ignoreList":[]}