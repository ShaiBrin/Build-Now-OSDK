/*
 * Copyright 2024 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { extractNamespace } from "../../internal/conversions/modernToLegacyWhereClause.js";
import { createSimpleCache } from "../SimpleCache.js";
import { InterfaceDefRef, ObjectDefRef, UnderlyingOsdkObject } from "./InternalSymbols.js";
const handlerCache = createSimpleCache(new WeakMap(), createInterfaceProxyHandler);
/** @internal */
export function createOsdkInterface(underlying, interfaceDef) {
  const handler = handlerCache.get(interfaceDef);
  const proxy = new Proxy({
    [UnderlyingOsdkObject]: underlying,
    [InterfaceDefRef]: interfaceDef
  },
  // the wrapper doesn't contain everything obviously. we proxy
  handler);
  return proxy;
}
function createInterfaceProxyHandler(newDef) {
  return {
    getOwnPropertyDescriptor(target, p) {
      const underlying = target[UnderlyingOsdkObject];
      const objDef = underlying[ObjectDefRef];
      switch (p) {
        case "$primaryKey":
        case "$title":
        case "$objectType":
        case "$rid":
          return underlying[p] != null ? Reflect.getOwnPropertyDescriptor(underlying, p) : undefined;
        case "$apiName":
          return {
            enumerable: true,
            configurable: true,
            value: target[InterfaceDefRef].apiName
          };
      }
      const [objApiNamespace] = extractNamespace(newDef.apiName);
      if (objApiNamespace != null) {
        const [apiNamespace, apiName] = extractNamespace(p);
        if (apiNamespace == null) {
          p = `${objApiNamespace}.${apiName}`;
        }
      }
      if (newDef.properties[p] != null) {
        return {
          enumerable: true,
          configurable: true,
          value: underlying[objDef.interfaceMap[newDef.apiName][p]]
        };
      }
    },
    ownKeys(target) {
      const underlying = target[UnderlyingOsdkObject];
      const [objApiNamespace] = extractNamespace(newDef.apiName);
      let propNames = Object.keys(newDef.properties);
      if (objApiNamespace != null) {
        propNames = propNames.map(p => {
          const [apiNamespace, apiName] = extractNamespace(p);
          if (apiNamespace === objApiNamespace) {
            p = apiName;
          }
          return p;
        });
      }
      return ["$apiName", "$objectType", "$primaryKey", ...(underlying["$rid"] ? ["$rid"] : []), "$title", ...propNames];
    },
    get(target, p) {
      const underlying = target[UnderlyingOsdkObject];
      switch (p) {
        case InterfaceDefRef:
          return newDef;
        case "$apiName":
          return newDef.apiName;
        case "$as":
        case UnderlyingOsdkObject:
        case "$primaryKey":
        case "$title":
        case "$objectType":
        case "$rid":
          return underlying[p];
      }
      const [objApiNamespace] = extractNamespace(newDef.apiName);
      if (objApiNamespace != null) {
        const [apiNamespace, apiName] = extractNamespace(p);
        if (apiNamespace == null) {
          p = `${objApiNamespace}.${apiName}`;
        }
      }
      if (newDef.properties[p] != null) {
        const objDef = target[UnderlyingOsdkObject][ObjectDefRef];
        return underlying[objDef.interfaceMap[newDef.apiName][p]];
      }
    }
  };
}
//# sourceMappingURL=createOsdkInterface.js.map