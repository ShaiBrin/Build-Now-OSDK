{"version":3,"file":"applyQuery.js","names":["OntologiesV2","createAttachmentFromRid","createObjectSet","addUserAgentAndRequestContextHeaders","augmentRequestContext","toDataValueQueries","applyQuery","client","query","params","qd","ontologyProvider","getQueryDefinition","apiName","response","Queries","execute","finalMethodCall","ontologyRid","parameters","remapQueryParams","objectOutputDefs","getRequiredDefinitions","output","remappedResponse","remapQueryResponse","value","paramTypes","parameterMap","key","Object","entries","responseDataType","responseValue","definitions","nullable","undefined","Error","multiplicity","withoutMultiplicity","i","length","type","set","def","get","object","createQueryObjectResponse","objectSet","objectSets","objectType","reference","subtype","struct","requiresConversion","result","groups","push","subResult","subKey","dataType","Map","objectDef","getObjectDefinition","values","some","primaryKey","$apiName","$title","$objectType","$primaryKey"],"sources":["applyQuery.js"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as OntologiesV2 from \"@osdk/internal.foundry.ontologiesv2\";\nimport { createAttachmentFromRid } from \"../createAttachmentFromRid.js\";\nimport { createObjectSet } from \"../objectSet/createObjectSet.js\";\nimport { addUserAgentAndRequestContextHeaders } from \"../util/addUserAgentAndRequestContextHeaders.js\";\nimport { augmentRequestContext } from \"../util/augmentRequestContext.js\";\nimport { toDataValueQueries } from \"../util/toDataValueQueries.js\";\nexport async function applyQuery(client, query, params) {\n    const qd = await client.ontologyProvider.getQueryDefinition(query.apiName);\n    const response = await OntologiesV2.Queries.execute(addUserAgentAndRequestContextHeaders(augmentRequestContext(client, _ => ({ finalMethodCall: \"applyQuery\" })), query), await client.ontologyRid, query.apiName, {\n        parameters: params\n            ? await remapQueryParams(params, client, qd.parameters)\n            : {},\n    });\n    const objectOutputDefs = await getRequiredDefinitions(qd.output, client);\n    const remappedResponse = await remapQueryResponse(client, qd.output, response.value, objectOutputDefs);\n    return remappedResponse;\n}\nasync function remapQueryParams(params, client, paramTypes) {\n    const parameterMap = {};\n    for (const [key, value] of Object.entries(params)) {\n        parameterMap[key] = await toDataValueQueries(value, client, paramTypes[key]);\n    }\n    return parameterMap;\n}\nasync function remapQueryResponse(client, responseDataType, responseValue, definitions) {\n    // handle null responses\n    if (responseValue == null) {\n        if (responseDataType.nullable) {\n            return undefined;\n        }\n        else {\n            throw new Error(\"Got null response when nullable was not allowed\");\n        }\n    }\n    if (responseDataType.multiplicity != null\n        && responseDataType.multiplicity !== false) {\n        const withoutMultiplicity = { ...responseDataType, multiplicity: false };\n        for (let i = 0; i < responseValue.length; i++) {\n            responseValue[i] = await remapQueryResponse(client, withoutMultiplicity, responseValue[i], definitions);\n        }\n        return responseValue;\n    }\n    switch (responseDataType.type) {\n        case \"union\": {\n            throw new Error(\"Union return types are not yet supported\");\n        }\n        case \"set\": {\n            for (let i = 0; i < responseValue.length; i++) {\n                responseValue[i] = await remapQueryResponse(client, responseDataType.set, responseValue[i], definitions);\n            }\n            return responseValue;\n        }\n        case \"attachment\": {\n            return createAttachmentFromRid(client, responseValue);\n        }\n        case \"object\": {\n            const def = definitions.get(responseDataType.object);\n            if (!def) {\n                throw new Error(`Missing definition for ${responseDataType.object}`);\n            }\n            return createQueryObjectResponse(responseValue, def);\n        }\n        case \"objectSet\": {\n            const def = definitions.get(responseDataType.objectSet);\n            if (!def) {\n                throw new Error(`Missing definition for ${responseDataType.objectSet}`);\n            }\n            if (typeof responseValue === \"string\") {\n                return createObjectSet(def, client, {\n                    type: \"intersect\",\n                    objectSets: [\n                        { type: \"base\", objectType: responseDataType.objectSet },\n                        { type: \"reference\", reference: responseValue },\n                    ],\n                });\n            }\n            return createObjectSet(def, client, responseValue);\n        }\n        case \"struct\": {\n            // figure out what keys need to be fixed up\n            for (const [key, subtype] of Object.entries(responseDataType.struct)) {\n                if (requiresConversion(subtype)) {\n                    responseValue[key] = await remapQueryResponse(client, subtype, responseValue[key], definitions);\n                }\n            }\n            return responseValue;\n        }\n        case \"twoDimensionalAggregation\": {\n            const result = [];\n            for (const { key, value } of responseValue.groups) {\n                result.push({ key, value });\n            }\n            return result;\n        }\n        case \"threeDimensionalAggregation\": {\n            const result = [];\n            for (const { key, groups } of responseValue.groups) {\n                const subResult = [];\n                for (const { key: subKey, value } of groups) {\n                    subResult.push({ key: subKey, value });\n                }\n                result.push({ key, groups: subResult });\n            }\n            return result;\n        }\n    }\n    return responseValue;\n}\nasync function getRequiredDefinitions(dataType, client) {\n    const result = new Map();\n    switch (dataType.type) {\n        case \"objectSet\": {\n            const objectDef = await client.ontologyProvider.getObjectDefinition(dataType.objectSet);\n            result.set(dataType.objectSet, objectDef);\n            break;\n        }\n        case \"object\": {\n            const objectDef = await client.ontologyProvider.getObjectDefinition(dataType.object);\n            result.set(dataType.object, objectDef);\n            break;\n        }\n        case \"set\": {\n            return getRequiredDefinitions(dataType.set, client);\n        }\n        case \"struct\": {\n            for (const value of Object.values(dataType.struct)) {\n                for (const [type, objectDef] of await getRequiredDefinitions(value, client)) {\n                    result.set(type, objectDef);\n                }\n            }\n            break;\n        }\n        case \"attachment\":\n        case \"boolean\":\n        case \"date\":\n        case \"double\":\n        case \"float\":\n        case \"integer\":\n        case \"long\":\n        case \"object\":\n        case \"string\":\n        case \"threeDimensionalAggregation\":\n        case \"timestamp\":\n        case \"twoDimensionalAggregation\":\n        case \"union\":\n            break;\n    }\n    return result;\n}\nfunction requiresConversion(dataType) {\n    switch (dataType.type) {\n        case \"boolean\":\n        case \"date\":\n        case \"double\":\n        case \"float\":\n        case \"integer\":\n        case \"long\":\n        case \"string\":\n        case \"timestamp\":\n            return false;\n        case \"union\":\n            return true;\n        case \"struct\":\n            return Object.values(dataType.struct).some(requiresConversion);\n        case \"set\":\n            return requiresConversion(dataType.set);\n        case \"attachment\":\n        case \"objectSet\":\n        case \"twoDimensionalAggregation\":\n        case \"threeDimensionalAggregation\":\n        case \"object\":\n            return true;\n        default:\n            return false;\n    }\n}\nexport function createQueryObjectResponse(primaryKey, objectDef) {\n    return {\n        $apiName: objectDef.apiName,\n        $title: undefined,\n        $objectType: objectDef.apiName,\n        $primaryKey: primaryKey,\n    };\n}\n"],"mappings":"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","ignoreList":[]}