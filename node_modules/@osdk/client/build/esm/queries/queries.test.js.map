{"version":3,"file":"queries.test.js","names":["$ontologyRid","$Queries","acceptsThreeDimensionalAggregationFunction","acceptsTwoDimensionalAggregationFunction","addOne","Employee","incrementPersonAge","incrementPersonAgeComplex","queryAcceptsObject","queryAcceptsObjectSets","returnsDate","returnsTimestamp","threeDimensionalAggregationFunction","twoDimensionalAggregationFunction","apiServer","afterAll","beforeAll","describe","expect","expectTypeOf","it","createClient","client","listen","close","result","executeFunction","n","toBe","employee","fetchOne","object","toEqual","$apiName","$objectType","$primaryKey","result2","employeeObjectSet","objectSet","toMatchTypeOf","resultWithTimestamp","resultWithDate","person","firstName","lastName","age","key","value","aggFunction","groups","startValue","endValue","fail","e","message","toMatch","queries","Object","keys","toStrictEqual","queryTypeReturnsArray","people"],"sources":["queries.test.js"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { $ontologyRid, $Queries, acceptsThreeDimensionalAggregationFunction, acceptsTwoDimensionalAggregationFunction, addOne, Employee, incrementPersonAge, incrementPersonAgeComplex, queryAcceptsObject, queryAcceptsObjectSets, returnsDate, returnsTimestamp, threeDimensionalAggregationFunction, twoDimensionalAggregationFunction, } from \"@osdk/client.test.ontology\";\nimport { apiServer } from \"@osdk/shared.test\";\nimport { afterAll, beforeAll, describe, expect, expectTypeOf, it, } from \"vitest\";\nimport { createClient } from \"../createClient.js\";\ndescribe(\"queries\", () => {\n    let client;\n    beforeAll(async () => {\n        apiServer.listen();\n        client = createClient(\"https://stack.palantir.com\", $ontologyRid, async () => \"myAccessToken\");\n    });\n    afterAll(() => {\n        apiServer.close();\n    });\n    it(\"simple query works\", async () => {\n        const result = await client(addOne).executeFunction({ n: 2 });\n        expect(result).toBe(3);\n    });\n    it(\"accepts objects\", async () => {\n        const employee = await client(Employee).fetchOne(50030);\n        const result = await client(queryAcceptsObject).executeFunction({\n            object: employee,\n        });\n        expect(result).toEqual({\n            $apiName: \"Employee\",\n            $objectType: \"Employee\",\n            $primaryKey: 50031,\n        });\n        // Should also accept primary keys\n        const result2 = await client(queryAcceptsObject).executeFunction({\n            object: 50030,\n        });\n        expect(result2).toEqual({\n            $apiName: \"Employee\",\n            $objectType: \"Employee\",\n            $primaryKey: 50031,\n        });\n    });\n    it(\"accepts objectSets\", async () => {\n        const employeeObjectSet = client(Employee);\n        const result = await client(queryAcceptsObjectSets).executeFunction({\n            objectSet: employeeObjectSet,\n        });\n        expectTypeOf().toMatchTypeOf();\n    });\n    it(\"no params work\", async () => {\n        const resultWithTimestamp = await client(returnsTimestamp)\n            .executeFunction();\n        expect(resultWithTimestamp).toBe(\"2019-01-01T00:00:00.000Z\");\n        const resultWithDate = await client(returnsDate).executeFunction();\n        expect(resultWithDate).toBe(\"2019-01-01\");\n    });\n    it(\"returns and accepts structs property\", async () => {\n        const result = await client(incrementPersonAge).executeFunction({\n            person: { firstName: \"John\", lastName: \"Doe\", age: 42 },\n        });\n        expect(result).toEqual({\n            firstName: \"John\",\n            lastName: \"Doe\",\n            age: 43,\n        });\n    });\n    it(\"returns and accepts complex structs property\", async () => {\n        const employee = await client(Employee).fetchOne(50030);\n        const result = await client(incrementPersonAgeComplex).executeFunction({\n            person: { firstName: \"John\", lastName: \"Doe\", age: 42, object: employee },\n        });\n        expect(result).toEqual({\n            firstName: \"John\",\n            lastName: \"Doe\",\n            age: 43,\n            object: {\n                $apiName: \"Employee\",\n                $objectType: \"Employee\",\n                $primaryKey: 50031,\n            },\n        });\n    });\n    it(\"two dimensional aggregation response works\", async () => {\n        const result = await client(twoDimensionalAggregationFunction)\n            .executeFunction();\n        expect(result).toEqual([{ key: \"Q-AFN\", value: 1 }, {\n                key: \"Q-AFO\",\n                value: 2,\n            }]);\n    });\n    it(\"two dimensional aggregation request/response works\", async () => {\n        const result = await client(acceptsTwoDimensionalAggregationFunction)\n            .executeFunction({\n            aggFunction: [\n                {\n                    key: \"testKey1\",\n                    value: 1,\n                },\n                {\n                    key: \"testKey2\",\n                    value: 2,\n                },\n            ],\n        });\n        expect(result).toEqual([{ key: \"responseKey1\", value: 3 }, {\n                key: \"responseKey2\",\n                value: 4,\n            }]);\n    });\n    it(\"three dimensional aggregation response works\", async () => {\n        const result = await client(threeDimensionalAggregationFunction)\n            .executeFunction();\n        expect(result).toEqual([{\n                key: \"Q-AFN\",\n                groups: [{\n                        key: {\n                            startValue: \"2010-10-01T00:00:00Z\",\n                            endValue: \"2010-10-02T00:00:00Z\",\n                        },\n                        value: 65.0,\n                    }],\n            }, { key: \"Q-AFO\", groups: [] }]);\n    });\n    it(\"throws when response is null and response is non-nullable\", async () => {\n        try {\n            const result = await client(addOne).executeFunction({ n: 3 });\n            expect.fail(\"Should not reach here\");\n        }\n        catch (e) {\n            expect(e.message).toMatch(`Got null response when nullable was not allowed`);\n        }\n    });\n    it(\"three dimensional aggregation request/response works\", async () => {\n        const result = await client(acceptsThreeDimensionalAggregationFunction)\n            .executeFunction({\n            aggFunction: [\n                {\n                    key: \"testKey1\",\n                    groups: [\n                        {\n                            key: {\n                                startValue: \"2010-10-01T00:00:00Z\",\n                                endValue: \"2010-10-02T00:00:00Z\",\n                            },\n                            value: 65.0,\n                        },\n                    ],\n                },\n                {\n                    key: \"testKey2\",\n                    groups: [],\n                },\n            ],\n        });\n        expect(result).toEqual([\n            {\n                key: \"Q-AFN\",\n                groups: [\n                    {\n                        key: {\n                            startValue: \"2010-10-01T00:00:00Z\",\n                            endValue: \"2010-10-02T00:00:00Z\",\n                        },\n                        value: 65.0,\n                    },\n                ],\n            },\n            {\n                key: \"Q-AFO\",\n                groups: [],\n            },\n        ]);\n    });\n    it(\"accepts and returns objects\", async () => {\n        const employeeObjectSet = client(Employee);\n        const result = await client(queryAcceptsObjectSets).executeFunction({\n            objectSet: employeeObjectSet,\n        });\n        expectTypeOf().toMatchTypeOf();\n    });\n    it(\"queries are enumerable\", async () => {\n        const queries = Object.keys($Queries);\n        expect(queries).toStrictEqual([\n            \"acceptsThreeDimensionalAggregationFunction\",\n            \"acceptsTwoDimensionalAggregationFunction\",\n            \"addOne\",\n            \"incrementPersonAge\",\n            \"incrementPersonAgeComplex\",\n            \"queryAcceptsObject\",\n            \"queryAcceptsObjectSets\",\n            \"queryTypeReturnsArray\",\n            \"returnsDate\",\n            \"returnsObject\",\n            \"returnsTimestamp\",\n            \"threeDimensionalAggregationFunction\",\n            \"twoDimensionalAggregationFunction\",\n        ]);\n    });\n    it(\"queries work with arrays\", async () => {\n        const result = await client($Queries.queryTypeReturnsArray).executeFunction({ people: [\"Brad\", \"George\", \"Ryan\"] });\n        expect(result).toEqual([\"Pitt\", \"Clooney\", \"Reynolds\"]);\n    });\n});\n"],"mappings":"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","ignoreList":[]}