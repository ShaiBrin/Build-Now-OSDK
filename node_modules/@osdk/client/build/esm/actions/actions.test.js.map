{"version":3,"file":"actions.test.js","names":["$Actions","$ontologyRid","actionTakesAttachment","createOffice","moveOffice","apiServer","stubData","afterAll","beforeAll","describe","expect","expectTypeOf","it","createClient","createAttachmentUpload","ActionValidationError","remapActionResponse","client","listen","close","result","applyAction","officeId","address","capacity","$returnEdits","toEqualTypeOf","toMatchInlineSnapshot","undefinedResult","toBeUndefined","batchApplyAction","toBeCallableWith","newAddress","newCapacity","$validateOnly","fail","e","toBeInstanceOf","validation","toMatchTypeOf","attachment","blob","attachmentUploadRequestBody","localAttachment1","filename","actionResponse","edits","type","deletedLinksCount","deletedObjectsCount","addedObjectCount","modifiedObjectsCount","addedLinksCount","batchActionResponse","remappedActionResponse","remappedBatchActionResponse","actions","Object","keys","toStrictEqual"],"sources":["actions.test.js"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { $Actions, $ontologyRid, actionTakesAttachment, createOffice, moveOffice, } from \"@osdk/client.test.ontology\";\nimport { apiServer, stubData } from \"@osdk/shared.test\";\nimport { afterAll, beforeAll, describe, expect, expectTypeOf, it, } from \"vitest\";\nimport { createClient } from \"../createClient.js\";\nimport { createAttachmentUpload } from \"../object/AttachmentUpload.js\";\nimport { ActionValidationError } from \"./ActionValidationError.js\";\nimport { remapActionResponse } from \"./applyAction.js\";\ndescribe(\"actions\", () => {\n    let client;\n    beforeAll(async () => {\n        apiServer.listen();\n        client = createClient(\"https://stack.palantir.com\", $ontologyRid, async () => \"myAccessToken\");\n    });\n    afterAll(() => {\n        apiServer.close();\n    });\n    it(\"conditionally returns the edits\", async () => {\n        const result = await client(createOffice).applyAction({\n            officeId: \"NYC\",\n            address: \"123 Main Street\",\n            capacity: 100,\n        }, { $returnEdits: true });\n        expectTypeOf().toEqualTypeOf();\n        expect(result).toMatchInlineSnapshot(`\n      {\n        \"addedLinks\": [],\n        \"addedObjects\": [\n          {\n            \"objectType\": \"Office\",\n            \"primaryKey\": \"NYC\",\n          },\n        ],\n        \"deletedLinksCount\": 0,\n        \"deletedObjectsCount\": 0,\n        \"editedObjectTypes\": [\n          \"Office\",\n        ],\n        \"modifiedObjects\": [],\n        \"type\": \"edits\",\n      }\n    `);\n        const undefinedResult = await client(createOffice).applyAction({\n            officeId: \"NYC\",\n            address: \"123 Main Street\",\n            capacity: 100,\n        });\n        expectTypeOf().toEqualTypeOf();\n        expect(undefinedResult).toBeUndefined();\n        const clientCreateOffice = client(createOffice).batchApplyAction;\n        expectTypeOf().toBeCallableWith([{\n                officeId: \"NYC\",\n                address: \"123 Main Street\",\n                capacity: 100,\n            }], { $returnEdits: true });\n    });\n    it(\"returns validation directly on validateOnly mode\", async () => {\n        const result = await client(moveOffice).applyAction({\n            officeId: \"SEA\",\n            newAddress: \"456 Pike Place\",\n            newCapacity: 40,\n        }, {\n            $validateOnly: true,\n        });\n        expectTypeOf().toEqualTypeOf();\n        expect(result).toMatchInlineSnapshot(`\n        {\n          \"parameters\": {},\n          \"result\": \"INVALID\",\n          \"submissionCriteria\": [],\n        }\n      `);\n    });\n    it(\"throws on validation errors\", async () => {\n        try {\n            const result = await client(moveOffice).applyAction({\n                officeId: \"SEA\",\n                newAddress: \"456 Pike Place\",\n                newCapacity: 40,\n            }, {\n                $returnEdits: true,\n            });\n            expect.fail(\"Should not reach here\");\n        }\n        catch (e) {\n            expect(e).toBeInstanceOf(ActionValidationError);\n            expect(e.validation).toMatchInlineSnapshot(`\n        {\n          \"parameters\": {},\n          \"result\": \"INVALID\",\n          \"submissionCriteria\": [],\n        }\n      `);\n        }\n    });\n    it(\"Accepts attachments\", async () => {\n        const clientBoundActionTakesAttachment = client(actionTakesAttachment).applyAction;\n        expectTypeOf().toMatchTypeOf();\n        const clientBoundBatchActionTakesAttachment = client(actionTakesAttachment).batchApplyAction;\n        expectTypeOf().toMatchTypeOf();\n        const result = await client(actionTakesAttachment).applyAction({\n            attachment: \"attachment.rid\",\n        });\n        expectTypeOf().toEqualTypeOf();\n        expect(result).toBeUndefined();\n    });\n    it(\"Accepts attachment uploads\", async () => {\n        const clientBoundActionTakesAttachment = client(actionTakesAttachment).applyAction;\n        const clientBoundBatchActionTakesAttachment = client(actionTakesAttachment).batchApplyAction;\n        expectTypeOf().toMatchTypeOf();\n        expectTypeOf().toMatchTypeOf();\n        const blob = stubData.attachmentUploadRequestBody[stubData.localAttachment1.filename];\n        const attachment = createAttachmentUpload(blob, \"file1.txt\");\n        const result = await client(actionTakesAttachment).applyAction({\n            attachment,\n        });\n        expectTypeOf().toEqualTypeOf();\n        expect(result).toBeUndefined();\n    });\n    it(\"conditionally returns edits in batch mode\", async () => {\n        const result = await client(moveOffice).batchApplyAction([\n            {\n                officeId: \"SEA\",\n                newAddress: \"456 Good Place\",\n                newCapacity: 40,\n            },\n            {\n                officeId: \"NYC\",\n                newAddress: \"123 Main Street\",\n                newCapacity: 80,\n            },\n        ], { $returnEdits: true });\n        expect(result).toMatchInlineSnapshot(`\n      {\n        \"addedLinks\": [],\n        \"addedObjects\": [],\n        \"deletedLinksCount\": 0,\n        \"deletedObjectsCount\": 0,\n        \"editedObjectTypes\": [\n          \"Office\",\n        ],\n        \"modifiedObjects\": [\n          {\n            \"objectType\": \"Office\",\n            \"primaryKey\": \"SEA\",\n          },\n          {\n            \"objectType\": \"Office\",\n            \"primaryKey\": \"NYC\",\n          },\n        ],\n        \"type\": \"edits\",\n      }\n    `);\n    });\n});\ndescribe(\"ActionResponse remapping\", () => {\n    const actionResponse = {\n        edits: {\n            type: \"edits\",\n            edits: [{\n                    \"objectType\": \"Developer\",\n                    \"primaryKey\": \"PalantirDev\",\n                    \"type\": \"addObject\",\n                }, {\n                    \"objectType\": \"Contractor\",\n                    \"primaryKey\": \"Contractor1\",\n                    \"type\": \"modifyObject\",\n                }, {\n                    \"aSideObject\": { \"primaryKey\": \"key1\", \"objectType\": \"Office\" },\n                    \"linkTypeApiNameAtoB\": \"test\",\n                    \"linkTypeApiNameBtoA\": \"test\",\n                    \"bSideObject\": { \"primaryKey\": \"key2\", \"objectType\": \"Employee\" },\n                    \"type\": \"addLink\",\n                }],\n            deletedLinksCount: 0,\n            deletedObjectsCount: 0,\n            addedObjectCount: 1,\n            modifiedObjectsCount: 1,\n            addedLinksCount: 1,\n        },\n    };\n    const batchActionResponse = {\n        edits: {\n            type: \"edits\",\n            edits: [{\n                    \"objectType\": \"Developer\",\n                    \"primaryKey\": \"PalantirDev\",\n                    \"type\": \"addObject\",\n                }, {\n                    \"objectType\": \"Contractor\",\n                    \"primaryKey\": \"Contractor1\",\n                    \"type\": \"modifyObject\",\n                }, {\n                    \"aSideObject\": { \"primaryKey\": \"key1\", \"objectType\": \"Office\" },\n                    \"linkTypeApiNameAtoB\": \"test\",\n                    \"linkTypeApiNameBtoA\": \"test\",\n                    \"bSideObject\": { \"primaryKey\": \"key2\", \"objectType\": \"Employee\" },\n                    \"type\": \"addLink\",\n                }],\n            deletedLinksCount: 0,\n            deletedObjectsCount: 0,\n            addedObjectCount: 1,\n            modifiedObjectsCount: 1,\n            addedLinksCount: 1,\n        },\n    };\n    it(\"Correctly unpacks edits and editedObjectTypes\", () => {\n        const remappedActionResponse = remapActionResponse(actionResponse);\n        const remappedBatchActionResponse = remapActionResponse(batchActionResponse);\n        expect(remappedActionResponse).toMatchInlineSnapshot(`\n      {\n        \"addedLinks\": [\n          {\n            \"aSideObject\": {\n              \"objectType\": \"Office\",\n              \"primaryKey\": \"key1\",\n            },\n            \"bSideObject\": {\n              \"objectType\": \"Employee\",\n              \"primaryKey\": \"key2\",\n            },\n            \"linkTypeApiNameAtoB\": \"test\",\n            \"linkTypeApiNameBtoA\": \"test\",\n          },\n        ],\n        \"addedObjects\": [\n          {\n            \"objectType\": \"Developer\",\n            \"primaryKey\": \"PalantirDev\",\n          },\n        ],\n        \"deletedLinksCount\": 0,\n        \"deletedObjectsCount\": 0,\n        \"editedObjectTypes\": [\n          \"Developer\",\n          \"Contractor\",\n          \"Office\",\n          \"Employee\",\n        ],\n        \"modifiedObjects\": [\n          {\n            \"objectType\": \"Contractor\",\n            \"primaryKey\": \"Contractor1\",\n          },\n        ],\n        \"type\": \"edits\",\n      }\n    `);\n        expect(remappedBatchActionResponse).toMatchInlineSnapshot(`\n      {\n        \"addedLinks\": [\n          {\n            \"aSideObject\": {\n              \"objectType\": \"Office\",\n              \"primaryKey\": \"key1\",\n            },\n            \"bSideObject\": {\n              \"objectType\": \"Employee\",\n              \"primaryKey\": \"key2\",\n            },\n            \"linkTypeApiNameAtoB\": \"test\",\n            \"linkTypeApiNameBtoA\": \"test\",\n          },\n        ],\n        \"addedObjects\": [\n          {\n            \"objectType\": \"Developer\",\n            \"primaryKey\": \"PalantirDev\",\n          },\n        ],\n        \"deletedLinksCount\": 0,\n        \"deletedObjectsCount\": 0,\n        \"editedObjectTypes\": [\n          \"Developer\",\n          \"Contractor\",\n          \"Office\",\n          \"Employee\",\n        ],\n        \"modifiedObjects\": [\n          {\n            \"objectType\": \"Contractor\",\n            \"primaryKey\": \"Contractor1\",\n          },\n        ],\n        \"type\": \"edits\",\n      }\n    `);\n    });\n    it(\"actions are enumerable\", async () => {\n        const actions = Object.keys($Actions);\n        expect(actions).toStrictEqual([\n            \"actionTakesAttachment\",\n            \"actionTakesObjectSet\",\n            \"createOffice\",\n            \"createOfficeAndEmployee\",\n            \"moveOffice\",\n            \"promoteEmployee\",\n            \"promoteEmployeeObject\",\n        ]);\n    });\n});\n"],"mappings":"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BC,mBAAmB,EAAE,CAAC;MACtBC,gBAAgB,EAAE,CAAC;MACnBC,oBAAoB,EAAE,CAAC;MACvBC,eAAe,EAAE;IACrB;EACJ,CAAC;EACDxC,EAAE,CAAC,+CAA+C,EAAE,MAAM;IACtD,MAAM0C,sBAAsB,GAAGtC,mBAAmB,CAAC6B,cAAc,CAAC;IAClE,MAAMU,2BAA2B,GAAGvC,mBAAmB,CAACqC,mBAAmB,CAAC;IAC5E3C,MAAM,CAAC4C,sBAAsB,CAAC,CAAC3B,qBAAqB,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IACEjB,MAAM,CAAC6C,2BAA2B,CAAC,CAAC5B,qBAAqB,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;EACF,CAAC,CAAC;EACFf,EAAE,CAAC,wBAAwB,EAAE,YAAY;IACrC,MAAM4C,OAAO,GAAGC,MAAM,CAACC,IAAI,CAAC1D,QAAQ,CAAC;IACrCU,MAAM,CAAC8C,OAAO,CAAC,CAACG,aAAa,CAAC,CAC1B,uBAAuB,EACvB,sBAAsB,EACtB,cAAc,EACd,yBAAyB,EACzB,YAAY,EACZ,iBAAiB,EACjB,uBAAuB,CAC1B,CAAC;EACN,CAAC,CAAC;AACN,CAAC,CAAC","ignoreList":[]}