/*
 * Copyright 2024 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { TimeseriesDurationMapping } from "@osdk/api";
import * as OntologiesV2 from "@osdk/internal.foundry.ontologiesv2";
import { iterateReadableStream, parseStreamedResponse } from "./util/streamutils.js";
export class TimeSeriesPropertyImpl {
  #triplet;
  #client;
  constructor(client, objectApiName, primaryKey, propertyName) {
    this.#client = client;
    this.#triplet = [objectApiName, primaryKey, propertyName];
  }
  async getFirstPoint() {
    return OntologiesV2.TimeSeriesPropertiesV2.getFirstPoint(this.#client, await this.#client.ontologyRid, ...this.#triplet);
  }
  async getLastPoint() {
    return OntologiesV2.TimeSeriesPropertiesV2.getLastPoint(this.#client, await this.#client.ontologyRid, ...this.#triplet);
  }
  async getAllPoints(query) {
    const allPoints = [];
    for await (const point of this.asyncIterPoints(query)) {
      allPoints.push({
        time: point.time,
        value: point.value
      });
    }
    return allPoints;
  }
  async *asyncIterPoints(query) {
    const streamPointsIterator = await OntologiesV2.TimeSeriesPropertiesV2.streamPoints(this.#client, await this.#client.ontologyRid, ...this.#triplet, query ? {
      range: getTimeRange(query)
    } : {});
    const reader = streamPointsIterator.stream().getReader();
    for await (const point of parseStreamedResponse(iterateReadableStream(reader))) {
      yield {
        time: point.time,
        value: point.value
      };
    }
  }
}
function getTimeRange(body) {
  if ("$startTime" in body || "$endTime" in body) {
    return {
      type: "absolute",
      startTime: body.$startTime,
      endTime: body.$endTime
    };
  }
  return body.$before ? {
    type: "relative",
    startTime: {
      when: "BEFORE",
      value: body.$before,
      unit: TimeseriesDurationMapping[body.$unit]
    }
  } : {
    type: "relative",
    endTime: {
      when: "AFTER",
      value: body.$after,
      unit: TimeseriesDurationMapping[body.$unit]
    }
  };
}
//# sourceMappingURL=createTimeseriesProperty.js.map