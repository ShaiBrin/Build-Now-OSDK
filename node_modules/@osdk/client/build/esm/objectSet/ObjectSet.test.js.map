{"version":3,"file":"ObjectSet.test.js","names":["isOk","$ontologyRid","Employee","FooInterface","Office","apiServer","stubData","afterAll","beforeAll","describe","expect","expectTypeOf","it","createClient","client","listen","close","employeeObjectSet","officeObjectSet","union","subtract","intersect","objectSet","unionedObjectSet","iter","data","employees","fetchPage","emp","employeeId","toEqual","objectSet2","where","subtractedObjectSet","intersectedObjectSet","$orderBy","toMatchObject","$apiName","$objectType","$primaryKey","class","employeeStatus","anything","fullName","office","startDate","$title","employee","fetchOne","employee1","toMatchTypeOf","toBe","employeeResult","fetchOneWithErrors","value","$select","branded","toEqualTypeOf","rejects","toThrow","employee2","pivotTo","result","fetchPageWithErrors","$in","toBeDefined","each","k","opts","$__EXPERIMENTAL_strictNonNull","$includeRid","toHaveLength","not","toBeUndefined","empNotStrict","cheesedFooNotStrict","$as","fooSpt"],"sources":["ObjectSet.test.js"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isOk } from \"@osdk/api\";\nimport { $ontologyRid, Employee, FooInterface, Office, } from \"@osdk/client.test.ontology\";\nimport { apiServer, stubData } from \"@osdk/shared.test\";\nimport { afterAll, beforeAll, describe, expect, expectTypeOf, it, } from \"vitest\";\nimport { createClient } from \"../createClient.js\";\ndescribe(\"ObjectSet\", () => {\n    let client;\n    beforeAll(async () => {\n        apiServer.listen();\n        client = createClient(\"https://stack.palantir.com\", $ontologyRid, async () => \"myAccessToken\");\n    });\n    afterAll(() => {\n        apiServer.close();\n    });\n    it(\"does not allow intersect/union/subtract with different object types\", () => {\n        const employeeObjectSet = client(Employee);\n        const officeObjectSet = client(Office);\n        // @ts-expect-error\n        employeeObjectSet.union(officeObjectSet);\n        // @ts-expect-error\n        employeeObjectSet.subtract(officeObjectSet);\n        // @ts-expect-error\n        employeeObjectSet.intersect(officeObjectSet);\n    });\n    it(\"can be cast bidirectionally\", () => {\n        function takesOldStyleObjectSet(os) {\n            return os;\n        }\n        function takesNewStyleObjectSet(os) {\n            return os;\n        }\n        function maybe() {\n            const newStyleObjectSet = client(Employee);\n            const oldStyleObjectSet = newStyleObjectSet;\n            takesOldStyleObjectSet(newStyleObjectSet);\n            takesNewStyleObjectSet(newStyleObjectSet);\n            takesOldStyleObjectSet(oldStyleObjectSet);\n            takesNewStyleObjectSet(oldStyleObjectSet);\n        }\n        if (false) {\n            // here for a simple type check\n            maybe();\n        }\n    });\n    it(\"objects set union\", async () => {\n        const objectSet = client(Employee);\n        const unionedObjectSet = objectSet.union(objectSet);\n        let iter = 0;\n        const { data: employees } = await unionedObjectSet.fetchPage();\n        for (const emp of employees) {\n            expect(emp.employeeId).toEqual(50030 + iter);\n            iter += 1;\n        }\n        expect(iter).toEqual(2);\n    });\n    it(\"objects set subtract\", async () => {\n        const objectSet = client(Employee);\n        const objectSet2 = client(Employee).where({\n            employeeId: 50030,\n        });\n        const subtractedObjectSet = objectSet.subtract(objectSet2);\n        let iter = 0;\n        const { data: employees } = await subtractedObjectSet.fetchPage();\n        for (const emp of employees) {\n            expect(emp.employeeId).toEqual(50031 + iter);\n            iter += 1;\n        }\n        expect(iter).toEqual(2);\n    });\n    it(\"objects set intersect\", async () => {\n        const objectSet = client(Employee);\n        const intersectedObjectSet = objectSet.intersect(objectSet);\n        let iter = 0;\n        const { data: employees } = await intersectedObjectSet.fetchPage();\n        for (const emp of employees) {\n            expect(emp.employeeId).toEqual(50032);\n            iter += 1;\n        }\n        expect(iter).toEqual(1);\n    });\n    it(\"orders objects in ascending order without a filter, and returns all results\", async () => {\n        const { data: employees } = await client(Employee)\n            .fetchPage({\n            $orderBy: { \"employeeId\": \"asc\" },\n        });\n        expect(employees).toMatchObject([\n            {\n                $apiName: \"Employee\",\n                $objectType: \"Employee\",\n                $primaryKey: 50030,\n                class: \"Red\",\n                employeeId: 50030,\n                employeeStatus: expect.anything(),\n                fullName: \"John Doe\",\n                office: \"NYC\",\n                startDate: \"2019-01-01\",\n            },\n            {\n                $apiName: \"Employee\",\n                $objectType: \"Employee\",\n                $primaryKey: 50031,\n                $title: \"Jane Doe\",\n                class: \"Blue\",\n                employeeId: 50031,\n                employeeStatus: expect.anything(),\n                fullName: \"Jane Doe\",\n                office: \"SEA\",\n                startDate: \"2012-02-12\",\n            },\n            {\n                $apiName: \"Employee\",\n                $objectType: \"Employee\",\n                $primaryKey: 50032,\n                $title: \"Jack Smith\",\n                class: \"Red\",\n                employeeId: 50032,\n                employeeStatus: expect.anything(),\n                fullName: \"Jack Smith\",\n                office: \"LON\",\n                startDate: \"2015-05-15\",\n            },\n        ]);\n    });\n    it(\"allows fetching by PK from a base object set - fetchOne\", async () => {\n        const employee = await client(Employee).fetchOne(stubData.employee1.employeeId);\n        expectTypeOf().toMatchTypeOf;\n        expect(employee.$primaryKey).toBe(stubData.employee1.employeeId);\n    });\n    it(\"allows fetching by PK from a base object set - fetchOneWithErrors\", async () => {\n        const employeeResult = await client(Employee)\n            .fetchOneWithErrors(stubData.employee1.employeeId);\n        expectTypeOf().toMatchTypeOf;\n        if (isOk(employeeResult)) {\n            const employee = employeeResult.value;\n            expect(employee.$primaryKey).toBe(stubData.employee1.employeeId);\n        }\n    });\n    it(\"allows fetching by PK from a base object set with selected properties - fetchOne\", async () => {\n        const employee = await client(Employee).fetchOne(stubData.employee1.employeeId, { $select: [\"fullName\"] });\n        expectTypeOf().branded.toEqualTypeOf;\n        expect(employee.$primaryKey).toBe(stubData.employee1.employeeId);\n    });\n    it(\"allows fetching by PK from a base object set with selected properties - fetchOneWithErrors\", async () => {\n        const employeeResult = await client(Employee)\n            .fetchOneWithErrors(stubData.employee1.employeeId, { $select: [\"fullName\"] });\n        expectTypeOf().branded.toEqualTypeOf;\n        if (isOk(employeeResult)) {\n            const employee = employeeResult.value;\n            expect(employee.$primaryKey).toBe(stubData.employee1.employeeId);\n        }\n    });\n    it(\"throws when fetching by PK with an object that does not exist - fetchOne\", async () => {\n        await expect(client(Employee).fetchOne(-1)).rejects\n            .toThrow();\n    });\n    it(\"throws when fetching by PK with an object that does not exist - fetchOneWithErrors\", async () => {\n        const employeeResult = await client(Employee)\n            .fetchOneWithErrors(-1);\n        expectTypeOf().branded.toEqualTypeOf;\n        expect(\"error\" in employeeResult);\n    });\n    it(\"allows fetching by PK from a pivoted object set - fetchOne\", async () => {\n        const employee = await client(Employee).where({\n            employeeId: stubData.employee2.employeeId,\n        })\n            .pivotTo(\"peeps\").fetchOne(stubData.employee1.employeeId);\n        expect(employee.$primaryKey).toBe(stubData.employee1.employeeId);\n    });\n    it(\"allows fetching by PK from a pivoted object set - fetchOneWithErrors\", async () => {\n        const employeeResult = await client(Employee).where({\n            employeeId: stubData.employee2.employeeId,\n        })\n            .pivotTo(\"peeps\").fetchOneWithErrors(stubData.employee1.employeeId);\n        if (isOk(employeeResult)) {\n            const employee = employeeResult.value;\n            expect(employee.$primaryKey).toBe(stubData.employee1.employeeId);\n        }\n    });\n    it(\" object set union works with fetchPageWithErrors\", async () => {\n        const objectSet = client(Employee);\n        const unionedObjectSet = objectSet.union(objectSet);\n        let iter = 0;\n        const result = await unionedObjectSet.fetchPageWithErrors();\n        if (isOk(result)) {\n            const employees = result.value.data;\n            for (const emp of employees) {\n                expect(emp.employeeId).toEqual(50030 + iter);\n                iter += 1;\n            }\n            expect(iter).toEqual(2);\n        }\n    });\n    it(\"allows $in filter with ReadonlyArrays\", () => {\n        const ids = [50030, 50031];\n        const objectSet = client(Employee).where({\n            employeeId: { $in: ids },\n        });\n        expect(objectSet).toBeDefined();\n    });\n    describe.each([\"fetchPage\", \"fetchPageWithErrors\"])(\"%s\", (k) => {\n        // describe(\"strictNonNull: \\\"drop\\\"\", () => {\n        //   describe(\"includeRid: true\", () => {\n        //     it(\"drops bad data\", async () => {\n        //       const opts = {\n        //         $__EXPERIMENTAL_strictNonNull: \"drop\",\n        //         $includeRid: true,\n        //       } as const;\n        //       const result = k === \"fetchPage\"\n        //         ? await client(Employee).fetchPage(opts)\n        //         : (await client(Employee).fetchPageWithErrors(opts)).value!;\n        //       expect(result.data).toHaveLength(3);\n        //       expectTypeOf(result.data[0]).branded.toEqualTypeOf<\n        //         Osdk<Employee, \"$rid\" | \"$all\">\n        //       >();\n        //       expectTypeOf(result.data[0]).branded.toEqualTypeOf<\n        //         Employee.OsdkObject<\"$rid\">\n        //       >();\n        //     });\n        //   });\n        //   describe(\"includeRid: false\", () => {\n        //     it(\"drops bad data\", async () => {\n        //       const opts = {\n        //         $__EXPERIMENTAL_strictNonNull: \"drop\",\n        //         $includeRid: false,\n        //       } as const;\n        //       const result = k === \"fetchPage\"\n        //         ? await client(Employee).fetchPage(opts)\n        //         : (await client(Employee).fetchPageWithErrors(opts)).value!;\n        //       expect(result.data).toHaveLength(3);\n        //       expectTypeOf(result.data[0]).branded.toEqualTypeOf<Osdk<Employee>>();\n        //       expectTypeOf(result.data[0]).branded.toEqualTypeOf<\n        //         Employee.OsdkObject\n        //       >();\n        //       expectTypeOf(result.data[0]).branded.toEqualTypeOf<\n        //         Employee.OsdkObject<never>\n        //       >();\n        //     });\n        //   });\n        // });\n        describe(\"strictNonNull: false\", () => {\n            describe(\"includeRid: true\", () => {\n                it(\"returns bad data\", async () => {\n                    const opts = {\n                        $__EXPERIMENTAL_strictNonNull: false,\n                        $includeRid: true,\n                    };\n                    const result = k === \"fetchPage\"\n                        ? await client(Employee).fetchPage(opts)\n                        : (await client(Employee).fetchPageWithErrors(opts)).value;\n                    expect(result.data).toHaveLength(4);\n                    expectTypeOf(result.data[0]).branded.toEqualTypeOf();\n                });\n            });\n            describe(\"includeRid: false\", () => {\n                it(\"returns bad data\", async () => {\n                    const opts = {\n                        $includeRid: false,\n                    };\n                    const result = k === \"fetchPage\"\n                        ? await client(Employee).fetchPage(opts)\n                        : (await client(Employee).fetchPageWithErrors(opts)).value;\n                    expect(result.data).toHaveLength(4);\n                    expectTypeOf(result.data[0]).branded.toEqualTypeOf();\n                });\n            });\n        });\n    });\n    describe.each([\"fetchOne\", \"fetchOneWithErrors\"])(\"%s\", (k) => {\n        describe(\"strictNonNull: false\", () => {\n            describe(\"includeRid: true\", () => {\n                it(\"returns bad data\", async () => {\n                    // Look at this\n                    const opts = {\n                        $__EXPERIMENTAL_strictNonNull: false,\n                        $includeRid: true,\n                    };\n                    const result = k === \"fetchOne\"\n                        ? await client(Employee).fetchOne(50033, opts)\n                        : (await client(Employee).fetchOneWithErrors(50033, opts)).value;\n                    expect(result).not.toBeUndefined();\n                    expectTypeOf(result).branded.toEqualTypeOf();\n                });\n            });\n            describe(\"includeRid: false\", () => {\n                it(\"returns bad data\", async () => {\n                    const opts = {\n                        $__EXPERIMENTAL_strictNonNull: false,\n                        $includeRid: false,\n                    };\n                    const result = k === \"fetchOne\"\n                        ? await client(Employee).fetchOne(50033, opts)\n                        : (await client(Employee).fetchOneWithErrors(50033, opts)).value;\n                    expect(result).not.toBeUndefined();\n                    expectTypeOf(result).branded.toEqualTypeOf();\n                });\n            });\n        });\n    });\n    describe(\"conversions\", () => {\n        describe(\"strictNonNull: false\", () => {\n            it(\"returns bad data\", async () => {\n                const result = await client(Employee).fetchPage({});\n                const empNotStrict = result.data[0];\n                const empNotStrict2 = empNotStrict;\n                expectTypeOf(empNotStrict).branded.toEqualTypeOf();\n                expectTypeOf(empNotStrict).branded.toEqualTypeOf();\n                expectTypeOf(empNotStrict).branded.toEqualTypeOf();\n                expectTypeOf(empNotStrict.employeeId).toEqualTypeOf();\n                expectTypeOf(empNotStrict2.employeeId).toEqualTypeOf();\n                expectTypeOf()\n                    .toEqualTypeOf();\n                expectTypeOf()\n                    .toEqualTypeOf();\n                expectTypeOf()\n                    .toEqualTypeOf();\n                expectTypeOf()\n                    .toEqualTypeOf();\n                expectTypeOf()\n                    .toEqualTypeOf();\n                expectTypeOf()\n                    .toEqualTypeOf();\n                expectTypeOf()\n                    .toEqualTypeOf();\n                expectTypeOf()\n                    .toEqualTypeOf();\n                const CheesedFoo = FooInterface;\n                const cheesedFooNotStrict = result.data[0].$as(CheesedFoo);\n                expectTypeOf(cheesedFooNotStrict).branded.toEqualTypeOf();\n                cheesedFooNotStrict.fooSpt;\n            });\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}