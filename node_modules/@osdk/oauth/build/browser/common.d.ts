import type { AuthorizationServer, Client, HttpRequestOptions, OAuth2TokenEndpointResponse } from "oauth4webapi";
import type { BaseOauthClient, Events } from "./BaseOauthClient.js";
import type { Token } from "./Token.js";
type LocalStorageState = {
    refresh_token?: never;
    codeVerifier?: never;
    state?: never;
    oldUrl: string;
} | {
    refresh_token?: never;
    codeVerifier: string;
    state: string;
    oldUrl: string;
} | {
    refresh_token?: string;
    codeVerifier?: never;
    state?: never;
    oldUrl?: never;
} | {
    refresh_token?: never;
    codeVerifier?: never;
    state?: never;
    oldUrl?: never;
};
export declare function saveLocal(client: Client, x: LocalStorageState): void;
export declare function removeLocal(client: Client): void;
export declare function readLocal(client: Client): LocalStorageState;
export declare function common<R extends undefined | (() => Promise<Token | undefined>)>(client: Client, as: AuthorizationServer, _signIn: () => Promise<Token>, oauthHttpOptions: HttpRequestOptions, refresh: R): {
    getToken: BaseOauthClient<keyof Events & string> & {
        refresh: R;
    };
    makeTokenAndSaveRefresh: (resp: OAuth2TokenEndpointResponse, type: "signIn" | "refresh") => Token;
};
export declare function createAuthorizationServer(ctxPath: string, url: string): Required<Pick<AuthorizationServer, "issuer" | "token_endpoint" | "authorization_endpoint" | "revocation_endpoint">>;
export {};
//# sourceMappingURL=common.d.ts.map