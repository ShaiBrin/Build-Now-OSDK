import type * as _Core from "@osdk/internal.foundry.core";
import type { SharedClient as $OldClient, SharedClientContext as $OldClientContext } from "@osdk/shared.client";
import type { SharedClient as $Client, SharedClientContext as $ClientContext } from "@osdk/shared.client2";
/**
 * Lists the object types for the given Ontology.
 *
 * Each page may be smaller or larger than the requested page size. However, it is guaranteed that if there are
 * more results available, at least one result will be present in the
 * response.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @public
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/objectTypes
 */
export declare function list($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Core.OntologyIdentifier,
    $queryParams?: {
        pageSize?: _Core.PageSize | undefined;
        pageToken?: _Core.PageToken | undefined;
    }
]): Promise<_Core.ListObjectTypesV2Response>;
/**
 * Gets a specific object type with the given API name.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @public
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/objectTypes/{objectType}
 */
export declare function get($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Core.OntologyIdentifier,
    objectType: _Core.ObjectTypeApiName
]): Promise<_Core.ObjectTypeV2>;
/**
 * Gets the full metadata for a specific object type with the given API name.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @alpha
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/objectTypes/{objectType}/fullMetadata
 */
export declare function getFullMetadata($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Core.OntologyIdentifier,
    objectType: _Core.ObjectTypeApiName,
    $queryParams?: {
        preview?: _Core.PreviewMode | undefined;
    }
]): Promise<_Core.ObjectTypeFullMetadata>;
/**
 * List the outgoing links for an object type.
 *
 * Third-party applications using this endpoint via OAuth2 must request the
 * following operation scopes: `api:ontologies-read`.
 *
 * @public
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/objectTypes/{objectType}/outgoingLinkTypes
 */
export declare function listOutgoingLinkTypes($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Core.OntologyIdentifier,
    objectType: _Core.ObjectTypeApiName,
    $queryParams?: {
        pageSize?: _Core.PageSize | undefined;
        pageToken?: _Core.PageToken | undefined;
    }
]): Promise<_Core.ListOutgoingLinkTypesResponseV2>;
/**
 * Get an outgoing link for an object type.
 *
 * Third-party applications using this endpoint via OAuth2 must request the
 * following operation scopes: `api:ontologies-read`.
 *
 * @public
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/objectTypes/{objectType}/outgoingLinkTypes/{linkType}
 */
export declare function getOutgoingLinkType($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Core.OntologyIdentifier,
    objectType: _Core.ObjectTypeApiName,
    linkType: _Core.LinkTypeApiName
]): Promise<_Core.LinkTypeSideV2>;
//# sourceMappingURL=ObjectTypeV2.d.ts.map