import type * as _Core from "@osdk/internal.foundry.core";
import type { SharedClient as $OldClient, SharedClientContext as $OldClientContext } from "@osdk/shared.client";
import type { SharedClient as $Client, SharedClientContext as $ClientContext } from "@osdk/shared.client2";
/**
 * Lists the linked objects for a specific object and the given link type.
 *
 * Note that this endpoint does not guarantee consistency. Changes to the data could result in missing or
 * repeated objects in the response pages.
 *
 * For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
 * are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.
 *
 * Each page may be smaller or larger than the requested page size. However, it
 * is guaranteed that if there are more results available, at least one result will be present
 * in the response.
 *
 * Note that null value properties will not be returned.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @public
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/links/{linkType}
 */
export declare function listLinkedObjects($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Core.OntologyIdentifier,
    objectType: _Core.ObjectTypeApiName,
    primaryKey: _Core.PropertyValueEscapedString,
    linkType: _Core.LinkTypeApiName,
    $queryParams: {
        pageSize?: _Core.PageSize | undefined;
        pageToken?: _Core.PageToken | undefined;
        select: Array<_Core.SelectedPropertyApiName>;
        orderBy?: _Core.OrderBy | undefined;
        artifactRepository?: _Core.ArtifactRepositoryRid | undefined;
        packageName?: _Core.SdkPackageName | undefined;
        excludeRid?: boolean | undefined;
    }
]): Promise<_Core.ListLinkedObjectsResponseV2>;
/**
 * Get a specific linked object that originates from another object.
 *
 * If there is no link between the two objects, `LinkedObjectNotFound` is thrown.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @public
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/objects/{objectType}/{primaryKey}/links/{linkType}/{linkedObjectPrimaryKey}
 */
export declare function getLinkedObject($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Core.OntologyIdentifier,
    objectType: _Core.ObjectTypeApiName,
    primaryKey: _Core.PropertyValueEscapedString,
    linkType: _Core.LinkTypeApiName,
    linkedObjectPrimaryKey: _Core.PropertyValueEscapedString,
    $queryParams: {
        select: Array<_Core.SelectedPropertyApiName>;
        artifactRepository?: _Core.ArtifactRepositoryRid | undefined;
        packageName?: _Core.SdkPackageName | undefined;
        excludeRid?: boolean | undefined;
    }
]): Promise<_Core.OntologyObjectV2>;
//# sourceMappingURL=LinkedObjectV2.d.ts.map