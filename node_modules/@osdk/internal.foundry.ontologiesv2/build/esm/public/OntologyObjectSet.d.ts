import type * as _Core from "@osdk/internal.foundry.core";
import type { SharedClient as $OldClient, SharedClientContext as $OldClientContext } from "@osdk/shared.client";
import type { SharedClient as $Client, SharedClientContext as $ClientContext } from "@osdk/shared.client2";
/**
 * Creates a temporary `ObjectSet` from the given definition.
 *
 * Third-party applications using this endpoint via OAuth2 must request the
 * following operation scopes: `api:ontologies-read api:ontologies-write`.
 *
 * @alpha
 *
 * Required Scopes: [api:ontologies-read, api:ontologies-write]
 * URL: /v2/ontologies/{ontology}/objectSets/createTemporary
 */
export declare function createTemporary($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Core.OntologyIdentifier,
    $body: _Core.CreateTemporaryObjectSetRequestV2
]): Promise<_Core.CreateTemporaryObjectSetResponseV2>;
/**
 * Gets the definition of the `ObjectSet` with the given RID.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @alpha
 *
 * Required Scopes: []
 * URL: /v2/ontologies/{ontology}/objectSets/{objectSetRid}
 */
export declare function get($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Core.OntologyIdentifier,
    objectSetRid: _Core.ObjectSetRid
]): Promise<_Core.ObjectSet>;
/**
 * Load the ontology objects present in the `ObjectSet` from the provided object set definition.
 *
 * For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
 * are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.
 *
 * Note that null value properties will not be returned.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @public
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/objectSets/loadObjects
 */
export declare function load($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Core.OntologyIdentifier,
    $body: _Core.LoadObjectSetRequestV2,
    $queryParams?: {
        artifactRepository?: _Core.ArtifactRepositoryRid | undefined;
        packageName?: _Core.SdkPackageName | undefined;
    }
]): Promise<_Core.LoadObjectSetResponseV2>;
/**
 * Load the ontology objects present in the `ObjectSet` from the provided object set definition. The resulting
 * objects may be scoped to an object type, in which all the selected properties on the object type are returned, or scoped
 * to an interface, in which only the object type properties that implement the properties of any interfaces in its
 * scope are returned. For objects that are scoped to an interface in the result, a mapping from interface to
 * object implementation is returned in order to interpret the objects as the interfaces that they implement.
 *
 * For Object Storage V1 backed objects, this endpoint returns a maximum of 10,000 objects. After 10,000 objects have been returned and if more objects
 * are available, attempting to load another page will result in an `ObjectsExceededLimit` error being returned. There is no limit on Object Storage V2 backed objects.
 *
 * Note that null value properties will not be returned. In addition, property metadata (rid, apiName, and primaryKey)
 * will be prefixed with '$' instead of '\_\_' as is the case in `loadObjects`.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @alpha
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/objectSets/loadBaseObjects
 */
export declare function loadBaseObjects($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Core.OntologyIdentifier,
    $body: _Core.LoadObjectSetV2BaseObjectsRequest,
    $queryParams?: {
        artifactRepository?: _Core.ArtifactRepositoryRid | undefined;
        packageName?: _Core.SdkPackageName | undefined;
    }
]): Promise<_Core.LoadObjectSetV2BaseObjectsResponse>;
/**
 * Aggregates the ontology objects present in the `ObjectSet` from the provided object set definition.
 *
 * Third-party applications using this endpoint via OAuth2 must request the following operation scope: `api:ontologies-read`.
 *
 * @public
 *
 * Required Scopes: [api:ontologies-read]
 * URL: /v2/ontologies/{ontology}/objectSets/aggregate
 */
export declare function aggregate($ctx: $Client | $ClientContext | $OldClient | $OldClientContext, ...args: [
    ontology: _Core.OntologyIdentifier,
    $body: _Core.AggregateObjectSetRequestV2,
    $queryParams?: {
        artifactRepository?: _Core.ArtifactRepositoryRid | undefined;
        packageName?: _Core.SdkPackageName | undefined;
    }
]): Promise<_Core.AggregateObjectsResponseV2>;
//# sourceMappingURL=OntologyObjectSet.d.ts.map