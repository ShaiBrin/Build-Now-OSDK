import type { PropertyValueClientToWire } from "../mapping/PropertyValueMapping.js";
import type { ObjectOrInterfaceDefinition, PropertyKeys } from "../ontology/ObjectOrInterface.js";
import type { CompileTimeMetadata } from "../ontology/ObjectTypeDefinition.js";
export type StringAggregateOption = "approximateDistinct" | "exactDistinct";
export type NumericAggregateOption = "min" | "max" | "sum" | "avg" | "approximateDistinct" | "exactDistinct";
type AGG_FOR_TYPE<T> = number extends T ? NumericAggregateOption : string extends T ? StringAggregateOption : never;
export type ValidAggregationKeys<Q extends ObjectOrInterfaceDefinition> = keyof ({
    [KK in AggregatableKeys<Q> as `${KK & string}:${AGG_FOR_TYPE<PropertyValueClientToWire[CompileTimeMetadata<Q>["properties"][KK]["type"]]>}`]?: any;
} & {
    $count?: any;
});
export type AggregatableKeys<Q extends ObjectOrInterfaceDefinition> = keyof {
    [P in PropertyKeys<Q>]: any;
};
export {};
//# sourceMappingURL=AggregatableKeys.d.ts.map