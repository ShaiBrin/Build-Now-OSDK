{"version":3,"file":"foundryPlatformFetch.js","names":["symbolClientContext","oldSymbolClientContext","PalantirApiError","UnknownError","foundryPlatformFetch","client","httpMethodNum","origPath","flags","contentType","responseContentType","args","path","replace","encodeURIComponent","shift","body","undefined","queryArgs","headerArgs","method","apiFetch","clientCtx","endpointPath","data","queryArguments","headers","requestMediaType","responseMediaType","url","URL","baseUrl","key","value","Object","entries","Array","isArray","item","searchParams","append","headersInit","Headers","set","forEach","toString","globalThis","Blob","JSON","stringify","response","fetch","ok","convertedError","json","message","errorName","errorCode","status","errorInstanceId","parameters","e","Error","blob"],"sources":["foundryPlatformFetch.js"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { symbolClientContext as oldSymbolClientContext } from \"@osdk/shared.client\";\nimport { symbolClientContext } from \"@osdk/shared.client2\";\nimport { PalantirApiError, UnknownError } from \"@osdk/shared.net.errors\";\nexport async function foundryPlatformFetch(client, [httpMethodNum, origPath, flags, contentType, responseContentType,], ...args) {\n    const path = origPath.replace(/\\{([^}]+)\\}/g, () => encodeURIComponent(args.shift()));\n    const body = (flags & 1) ? args.shift() : undefined;\n    const queryArgs = (flags & 2)\n        ? args.shift()\n        : undefined;\n    const headerArgs = (flags & 4)\n        ? args.shift()\n        : undefined;\n    const method = [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\",\n        \"PATCH\",\n    ][httpMethodNum];\n    return await apiFetch((client[symbolClientContext])\n        ?? (client[oldSymbolClientContext]) ?? client, method, path, body, queryArgs, headerArgs, contentType, responseContentType);\n}\nasync function apiFetch(clientCtx, method, endpointPath, data, queryArguments, headers, requestMediaType, responseMediaType) {\n    const url = new URL(`/api${endpointPath}`, clientCtx.baseUrl);\n    for (const [key, value] of Object.entries(queryArguments || {})) {\n        if (value == null) {\n            continue;\n        }\n        if (Array.isArray(value)) {\n            for (const item of value) {\n                url.searchParams.append(key, item);\n            }\n        }\n        else {\n            url.searchParams.append(key, value);\n        }\n    }\n    const headersInit = new Headers();\n    headersInit.set(\"Content-Type\", requestMediaType ?? \"application/json\");\n    headersInit.set(\"Accept\", responseMediaType ?? \"application/json\");\n    Object.entries(headers || {}).forEach(([key, value]) => {\n        if (value != null) {\n            headersInit.append(key, value.toString());\n        }\n    });\n    const body = data == null || (data instanceof globalThis.Blob)\n        ? data\n        : JSON.stringify(data);\n    // Because this uses the client's fetch, there is a 99.99% chance that it is already going\n    // to handle the error case and throw a PalantirApiError since its wrapped in a\n    // createFetchOrThrow.\n    const response = await clientCtx.fetch(url.toString(), {\n        body,\n        method: method,\n        headers: headersInit,\n    });\n    // However, if we ended up using a \"regular\" fetch, the\n    // error status codes are not thrown by fetch automatically,\n    // we have to look at the ok property and behave accordingly\n    if (!response.ok) {\n        try {\n            const convertedError = await response.json();\n            return new PalantirApiError(convertedError.message, convertedError.errorName, convertedError.errorCode, response.status, convertedError.errorInstanceId, convertedError.parameters);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                return new UnknownError(e.message, \"UNKNOWN\");\n            }\n            return new UnknownError(\"Unable to parse error response\", \"UNKNOWN\");\n        }\n    }\n    // Do not return anything if its a 204. Do not parse either!\n    if (response.status === 204) {\n        return;\n    }\n    if (responseMediaType == null || responseMediaType === \"application/json\") {\n        return await response.json();\n    }\n    return response.blob();\n}\n"],"mappings":"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","ignoreList":[]}